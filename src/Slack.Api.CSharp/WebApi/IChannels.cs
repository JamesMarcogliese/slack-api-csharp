// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Channels operations.
    /// </summary>
    public partial interface IChannels
    {
        /// <summary>
        /// Archives a channel.
        /// <see href="https://api.slack.com/methods/channels.archive" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='channel'>
        /// Channel to archive
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ArchiveErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ArchiveOKResponse>> ArchiveWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a channel.
        /// <see href="https://api.slack.com/methods/channels.create" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='validate'>
        /// Whether to return errors on invalid channel name instead of
        /// modifying it to meet the specified criteria.
        /// </param>
        /// <param name='name'>
        /// Name of channel to create
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CreateErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<CreateOKResponse>> CreateWithHttpMessagesAsync(string token = default(string), bool? validate = default(bool?), string name = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Fetches history of messages and events from a channel.
        /// <see href="https://api.slack.com/methods/channels.history" />
        /// </summary>
        /// <param name='count'>
        /// Number of messages to return, between 1 and 1000.
        /// </param>
        /// <param name='unreads'>
        /// Include `unread_count_display` in the output?
        /// </param>
        /// <param name='inclusive'>
        /// Include messages with latest or oldest timestamp in results.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:history`
        /// </param>
        /// <param name='oldest'>
        /// Start of time range of messages to include in results.
        /// </param>
        /// <param name='channel'>
        /// Channel to fetch history for.
        /// </param>
        /// <param name='latest'>
        /// End of time range of messages to include in results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HistoryErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<HistoryOKResponse>> HistoryWithHttpMessagesAsync(int? count = default(int?), bool? unreads = default(bool?), bool? inclusive = default(bool?), string token = default(string), double? oldest = default(double?), string channel = default(string), double? latest = default(double?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets information about a channel.
        /// <see href="https://api.slack.com/methods/channels.info" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:read`
        /// </param>
        /// <param name='includeLocale'>
        /// Set this to `true` to receive the locale for this channel. Defaults
        /// to `false`
        /// </param>
        /// <param name='channel'>
        /// Channel to get info on
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="InfoErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<InfoOKResponseModelModel>> InfoWithHttpMessagesAsync(string token = default(string), bool? includeLocale = default(bool?), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Invites a user to a channel.
        /// <see href="https://api.slack.com/methods/channels.invite" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='user'>
        /// User to invite to channel.
        /// </param>
        /// <param name='channel'>
        /// Channel to invite user to.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="InviteErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<InviteOKResponse>> InviteWithHttpMessagesAsync(string token = default(string), string user = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Joins a channel, creating it if needed.
        /// <see href="https://api.slack.com/methods/channels.join" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='validate'>
        /// Whether to return errors on invalid channel name instead of
        /// modifying it to meet the specified criteria.
        /// </param>
        /// <param name='name'>
        /// Name of channel to join
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="JoinErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<JoinOKResponse>> JoinWithHttpMessagesAsync(string token = default(string), bool? validate = default(bool?), string name = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Removes a user from a channel.
        /// <see href="https://api.slack.com/methods/channels.kick" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='user'>
        /// User to remove from channel.
        /// </param>
        /// <param name='channel'>
        /// Channel to remove user from.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="KickErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<KickOKResponse>> KickWithHttpMessagesAsync(string token = default(string), string user = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leaves a channel.
        /// <see href="https://api.slack.com/methods/channels.leave" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='channel'>
        /// Channel to leave
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="LeaveErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<LeaveOKResponse>> LeaveWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists all channels in a Slack team.
        /// <see href="https://api.slack.com/methods/channels.list" />
        /// </summary>
        /// <param name='excludeMembers'>
        /// Exclude the `members` collection from each `channel`
        /// </param>
        /// <param name='cursor'>
        /// Paginate through collections of data by setting the `cursor`
        /// parameter to a `next_cursor` attribute returned by a previous
        /// request's `response_metadata`. Default value fetches the first
        /// "page" of the collection. See [pagination](/docs/pagination) for
        /// more detail.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:read`
        /// </param>
        /// <param name='limit'>
        /// The maximum number of items to return. Fewer than the requested
        /// number of items may be returned, even if the end of the users list
        /// hasn't been reached.
        /// </param>
        /// <param name='excludeArchived'>
        /// Exclude archived channels from the list
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ListErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ListOKResponseModelModel>> ListWithHttpMessagesAsync(bool? excludeMembers = default(bool?), string cursor = default(string), string token = default(string), int? limit = default(int?), bool? excludeArchived = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the read cursor in a channel.
        /// <see href="https://api.slack.com/methods/channels.mark" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='ts'>
        /// Timestamp of the most recently seen message.
        /// </param>
        /// <param name='channel'>
        /// Channel to set reading cursor in.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MarkErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<MarkOKResponse>> MarkWithHttpMessagesAsync(string token = default(string), double? ts = default(double?), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Renames a channel.
        /// <see href="https://api.slack.com/methods/channels.rename" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='validate'>
        /// Whether to return errors on invalid channel name instead of
        /// modifying it to meet the specified criteria.
        /// </param>
        /// <param name='name'>
        /// New name for channel.
        /// </param>
        /// <param name='channel'>
        /// Channel to rename
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RenameErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RenameOKResponse>> RenameWithHttpMessagesAsync(string token = default(string), bool? validate = default(bool?), string name = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a thread of messages posted to a channel
        /// <see href="https://api.slack.com/methods/channels.replies" />
        /// </summary>
        /// <param name='threadTs'>
        /// Unique identifier of a thread's parent message
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:history`
        /// </param>
        /// <param name='channel'>
        /// Channel to fetch thread from
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RepliesErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RepliesOKResponse>> RepliesWithHttpMessagesAsync(double? threadTs = default(double?), string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the purpose for a channel.
        /// <see href="https://api.slack.com/methods/channels.setPurpose" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='purpose'>
        /// The new purpose
        /// </param>
        /// <param name='channel'>
        /// Channel to set the purpose of
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SetPurposeErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SetPurposeOKResponse>> SetPurposeWithHttpMessagesAsync(string token = default(string), string purpose = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the topic for a channel.
        /// <see href="https://api.slack.com/methods/channels.setTopic" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='topic'>
        /// The new topic
        /// </param>
        /// <param name='channel'>
        /// Channel to set the topic of
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SetTopicErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SetTopicOKResponse>> SetTopicWithHttpMessagesAsync(string token = default(string), string topic = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unarchives a channel.
        /// <see href="https://api.slack.com/methods/channels.unarchive" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='channel'>
        /// Channel to unarchive
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="UnarchiveErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UnarchiveOKResponse>> UnarchiveWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
