// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Team operations.
    /// </summary>
    public partial interface ITeam
    {
        /// <summary>
        /// Gets the access logs for the current team.
        /// <see href="https://api.slack.com/methods/team.accessLogs" />
        /// </summary>
        /// <param name='count'>
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `admin`
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='before'>
        /// End of time range of logs to include in results (inclusive).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="AccessLogsErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<AccessLogsOKResponse>> AccessLogsWithHttpMessagesAsync(string count = default(string), string token = default(string), string page = default(string), int? before = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets billable users information for the current team.
        /// <see href="https://api.slack.com/methods/team.billableInfo" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `admin`
        /// </param>
        /// <param name='user'>
        /// A user to retrieve the billable information for. Defaults to all
        /// users.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="BillableInfoErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<BillableInfoOKResponse>> BillableInfoWithHttpMessagesAsync(string token = default(string), string user = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets information about the current team.
        /// <see href="https://api.slack.com/methods/team.info" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `team:read`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="InfoErrorModel6Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<InfoOKResponseModelModelModelModelModelModel>> InfoWithHttpMessagesAsync(string token = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the integration logs for the current team.
        /// <see href="https://api.slack.com/methods/team.integrationLogs" />
        /// </summary>
        /// <param name='count'>
        /// </param>
        /// <param name='changeType'>
        /// Filter logs with this change type. Defaults to all logs.
        /// </param>
        /// <param name='appId'>
        /// Filter logs to this Slack app. Defaults to all logs.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `admin`
        /// </param>
        /// <param name='user'>
        /// Filter logs generated by this userâ€™s actions. Defaults to all logs.
        /// </param>
        /// <param name='serviceId'>
        /// Filter logs to this service. Defaults to all logs.
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="IntegrationLogsErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IntegrationLogsOKResponse>> IntegrationLogsWithHttpMessagesAsync(string count = default(string), string changeType = default(string), int? appId = default(int?), string token = default(string), string user = default(string), int? serviceId = default(int?), string page = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a team's profile.
        /// <see href="https://api.slack.com/methods/team.profile.get" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users.profile:read`
        /// </param>
        /// <param name='visibility'>
        /// Filter by visibility.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="GetErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<GetOKResponse>> GetWithHttpMessagesAsync(string token = default(string), string visibility = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
