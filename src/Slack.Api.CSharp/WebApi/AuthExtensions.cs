// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Auth.
    /// </summary>
    public static partial class AuthExtensions
    {
            /// <summary>
            /// Revokes a token.
            /// <see href="https://api.slack.com/methods/auth.revoke" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='test'>
            /// Setting this parameter to `1` triggers a _testing mode_ where the specified
            /// token will not actually be revoked.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            public static RevokeOKResponse Revoke(this IAuth operations, bool? test = default(bool?), string token = default(string))
            {
                return operations.RevokeAsync(test, token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revokes a token.
            /// <see href="https://api.slack.com/methods/auth.revoke" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='test'>
            /// Setting this parameter to `1` triggers a _testing mode_ where the specified
            /// token will not actually be revoked.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RevokeOKResponse> RevokeAsync(this IAuth operations, bool? test = default(bool?), string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeWithHttpMessagesAsync(test, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks authentication &amp; identity.
            /// <see href="https://api.slack.com/methods/auth.test" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            public static TestOKResponseModel Test(this IAuth operations, string token = default(string))
            {
                return operations.TestAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks authentication &amp; identity.
            /// <see href="https://api.slack.com/methods/auth.test" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestOKResponseModel> TestAsync(this IAuth operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
