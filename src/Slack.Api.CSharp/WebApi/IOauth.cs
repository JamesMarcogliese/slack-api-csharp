// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Oauth operations.
    /// </summary>
    public partial interface IOauth
    {
        /// <summary>
        /// Exchanges a temporary OAuth verifier code for an access token.
        /// <see href="https://api.slack.com/methods/oauth.access" />
        /// </summary>
        /// <param name='clientSecret'>
        /// Issued when you created your application.
        /// </param>
        /// <param name='code'>
        /// The `code` param returned via the OAuth callback.
        /// </param>
        /// <param name='singleChannel'>
        /// Request the user to add your app only to a single channel.
        /// </param>
        /// <param name='clientId'>
        /// Issued when you created your application.
        /// </param>
        /// <param name='redirectUri'>
        /// This must match the originally submitted URI (if one was sent).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="AccessErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<AccessOKResponse>> AccessWithHttpMessagesAsync(string clientSecret = default(string), string code = default(string), bool? singleChannel = default(bool?), string clientId = default(string), string redirectUri = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Exchanges a temporary OAuth verifier code for a workspace token.
        /// <see href="https://api.slack.com/methods/oauth.token" />
        /// </summary>
        /// <param name='clientSecret'>
        /// Issued when you created your application.
        /// </param>
        /// <param name='code'>
        /// The `code` param returned via the OAuth callback.
        /// </param>
        /// <param name='singleChannel'>
        /// Request the user to add your app only to a single channel.
        /// </param>
        /// <param name='clientId'>
        /// Issued when you created your application.
        /// </param>
        /// <param name='redirectUri'>
        /// This must match the originally submitted URI (if one was sent).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="TokenErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<TokenOKResponse>> TokenWithHttpMessagesAsync(string clientSecret = default(string), string code = default(string), bool? singleChannel = default(bool?), string clientId = default(string), string redirectUri = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
