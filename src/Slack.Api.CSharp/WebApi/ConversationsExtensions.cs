// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Conversations.
    /// </summary>
    public static partial class ConversationsExtensions
    {
            /// <summary>
            /// Archives a conversation.
            /// <see href="https://api.slack.com/methods/conversations.archive" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='channel'>
            /// ID of conversation to archive
            /// </param>
            public static ArchiveOKResponseModel Archive(this IConversations operations, string token = default(string), string channel = default(string))
            {
                return operations.ArchiveAsync(token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Archives a conversation.
            /// <see href="https://api.slack.com/methods/conversations.archive" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='channel'>
            /// ID of conversation to archive
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArchiveOKResponseModel> ArchiveAsync(this IConversations operations, string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ArchiveWithHttpMessagesAsync(token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Closes a direct message or multi-person direct message.
            /// <see href="https://api.slack.com/methods/conversations.close" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='channel'>
            /// Conversation to close.
            /// </param>
            public static CloseOKResponse Close(this IConversations operations, string token = default(string), string channel = default(string))
            {
                return operations.CloseAsync(token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Closes a direct message or multi-person direct message.
            /// <see href="https://api.slack.com/methods/conversations.close" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='channel'>
            /// Conversation to close.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloseOKResponse> CloseAsync(this IConversations operations, string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloseWithHttpMessagesAsync(token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initiates a public or private channel-based conversation
            /// <see href="https://api.slack.com/methods/conversations.create" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='name'>
            /// Name of the public or private channel to create
            /// </param>
            /// <param name='isPrivate'>
            /// Create a private channel instead of a public one
            /// </param>
            public static CreateOKResponseModel Create(this IConversations operations, string token = default(string), string name = default(string), bool? isPrivate = default(bool?))
            {
                return operations.CreateAsync(token, name, isPrivate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiates a public or private channel-based conversation
            /// <see href="https://api.slack.com/methods/conversations.create" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='name'>
            /// Name of the public or private channel to create
            /// </param>
            /// <param name='isPrivate'>
            /// Create a private channel instead of a public one
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateOKResponseModel> CreateAsync(this IConversations operations, string token = default(string), string name = default(string), bool? isPrivate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(token, name, isPrivate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetches a conversation's history of messages and events.
            /// <see href="https://api.slack.com/methods/conversations.history" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inclusive'>
            /// Include messages with latest or oldest timestamp in results only when
            /// either timestamp is specified.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:history`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the users list hasn't been
            /// reached.
            /// </param>
            /// <param name='oldest'>
            /// Start of time range of messages to include in results.
            /// </param>
            /// <param name='channel'>
            /// Conversation ID to fetch history for.
            /// </param>
            /// <param name='latest'>
            /// End of time range of messages to include in results.
            /// </param>
            public static HistoryOKResponseModel History(this IConversations operations, bool? inclusive = default(bool?), string cursor = default(string), string token = default(string), int? limit = default(int?), string oldest = default(string), string channel = default(string), string latest = default(string))
            {
                return operations.HistoryAsync(inclusive, cursor, token, limit, oldest, channel, latest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetches a conversation's history of messages and events.
            /// <see href="https://api.slack.com/methods/conversations.history" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inclusive'>
            /// Include messages with latest or oldest timestamp in results only when
            /// either timestamp is specified.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:history`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the users list hasn't been
            /// reached.
            /// </param>
            /// <param name='oldest'>
            /// Start of time range of messages to include in results.
            /// </param>
            /// <param name='channel'>
            /// Conversation ID to fetch history for.
            /// </param>
            /// <param name='latest'>
            /// End of time range of messages to include in results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HistoryOKResponseModel> HistoryAsync(this IConversations operations, bool? inclusive = default(bool?), string cursor = default(string), string token = default(string), int? limit = default(int?), string oldest = default(string), string channel = default(string), string latest = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HistoryWithHttpMessagesAsync(inclusive, cursor, token, limit, oldest, channel, latest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve information about a conversation.
            /// <see href="https://api.slack.com/methods/conversations.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:read`
            /// </param>
            /// <param name='channel'>
            /// Conversation ID to learn more about
            /// </param>
            /// <param name='includeLocale'>
            /// Set this to `true` to receive the locale for this conversation. Defaults to
            /// `false`
            /// </param>
            public static InfoOKResponseModelModelModel Info(this IConversations operations, string token = default(string), string channel = default(string), bool? includeLocale = default(bool?))
            {
                return operations.InfoAsync(token, channel, includeLocale).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve information about a conversation.
            /// <see href="https://api.slack.com/methods/conversations.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:read`
            /// </param>
            /// <param name='channel'>
            /// Conversation ID to learn more about
            /// </param>
            /// <param name='includeLocale'>
            /// Set this to `true` to receive the locale for this conversation. Defaults to
            /// `false`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfoOKResponseModelModelModel> InfoAsync(this IConversations operations, string token = default(string), string channel = default(string), bool? includeLocale = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InfoWithHttpMessagesAsync(token, channel, includeLocale, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invites users to a channel.
            /// <see href="https://api.slack.com/methods/conversations.invite" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='users'>
            /// A comma separated list of user IDs. Up to 30 users may be listed.
            /// </param>
            /// <param name='channel'>
            /// The ID of the public or private channel to invite user(s) to.
            /// </param>
            public static InviteOKResponseModel Invite(this IConversations operations, string token = default(string), string users = default(string), string channel = default(string))
            {
                return operations.InviteAsync(token, users, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invites users to a channel.
            /// <see href="https://api.slack.com/methods/conversations.invite" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='users'>
            /// A comma separated list of user IDs. Up to 30 users may be listed.
            /// </param>
            /// <param name='channel'>
            /// The ID of the public or private channel to invite user(s) to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InviteOKResponseModel> InviteAsync(this IConversations operations, string token = default(string), string users = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InviteWithHttpMessagesAsync(token, users, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Joins an existing conversation.
            /// <see href="https://api.slack.com/methods/conversations.join" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `channels:write`
            /// </param>
            /// <param name='channel'>
            /// ID of conversation to join
            /// </param>
            public static JoinOKResponseModel Join(this IConversations operations, string token = default(string), string channel = default(string))
            {
                return operations.JoinAsync(token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Joins an existing conversation.
            /// <see href="https://api.slack.com/methods/conversations.join" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `channels:write`
            /// </param>
            /// <param name='channel'>
            /// ID of conversation to join
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JoinOKResponseModel> JoinAsync(this IConversations operations, string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.JoinWithHttpMessagesAsync(token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a user from a conversation.
            /// <see href="https://api.slack.com/methods/conversations.kick" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='user'>
            /// User ID to be removed.
            /// </param>
            /// <param name='channel'>
            /// ID of conversation to remove user from.
            /// </param>
            public static KickOKResponseModel Kick(this IConversations operations, string token = default(string), string user = default(string), string channel = default(string))
            {
                return operations.KickAsync(token, user, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a user from a conversation.
            /// <see href="https://api.slack.com/methods/conversations.kick" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='user'>
            /// User ID to be removed.
            /// </param>
            /// <param name='channel'>
            /// ID of conversation to remove user from.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KickOKResponseModel> KickAsync(this IConversations operations, string token = default(string), string user = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.KickWithHttpMessagesAsync(token, user, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Leaves a conversation.
            /// <see href="https://api.slack.com/methods/conversations.leave" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='channel'>
            /// Conversation to leave
            /// </param>
            public static LeaveOKResponseModel Leave(this IConversations operations, string token = default(string), string channel = default(string))
            {
                return operations.LeaveAsync(token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Leaves a conversation.
            /// <see href="https://api.slack.com/methods/conversations.leave" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='channel'>
            /// Conversation to leave
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LeaveOKResponseModel> LeaveAsync(this IConversations operations, string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LeaveWithHttpMessagesAsync(token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all channels in a Slack team.
            /// <see href="https://api.slack.com/methods/conversations.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:read`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the list hasn't been reached.
            /// Must be an integer no larger than 1000.
            /// </param>
            /// <param name='excludeArchived'>
            /// Set to `true` to exclude archived channels from the list
            /// </param>
            /// <param name='types'>
            /// Mix and match channel types by providing a comma-separated list of any
            /// combination of `public_channel`, `private_channel`, `mpim`, `im`
            /// </param>
            public static ListOKResponseModelModelModel List(this IConversations operations, string cursor = default(string), string token = default(string), int? limit = default(int?), bool? excludeArchived = default(bool?), string types = default(string))
            {
                return operations.ListAsync(cursor, token, limit, excludeArchived, types).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all channels in a Slack team.
            /// <see href="https://api.slack.com/methods/conversations.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:read`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the list hasn't been reached.
            /// Must be an integer no larger than 1000.
            /// </param>
            /// <param name='excludeArchived'>
            /// Set to `true` to exclude archived channels from the list
            /// </param>
            /// <param name='types'>
            /// Mix and match channel types by providing a comma-separated list of any
            /// combination of `public_channel`, `private_channel`, `mpim`, `im`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListOKResponseModelModelModel> ListAsync(this IConversations operations, string cursor = default(string), string token = default(string), int? limit = default(int?), bool? excludeArchived = default(bool?), string types = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(cursor, token, limit, excludeArchived, types, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve members of a conversation.
            /// <see href="https://api.slack.com/methods/conversations.members" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:read`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the users list hasn't been
            /// reached.
            /// </param>
            /// <param name='channel'>
            /// ID of the conversation to retrieve members for
            /// </param>
            public static MembersOKResponse Members(this IConversations operations, string cursor = default(string), string token = default(string), int? limit = default(int?), string channel = default(string))
            {
                return operations.MembersAsync(cursor, token, limit, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve members of a conversation.
            /// <see href="https://api.slack.com/methods/conversations.members" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:read`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the users list hasn't been
            /// reached.
            /// </param>
            /// <param name='channel'>
            /// ID of the conversation to retrieve members for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MembersOKResponse> MembersAsync(this IConversations operations, string cursor = default(string), string token = default(string), int? limit = default(int?), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MembersWithHttpMessagesAsync(cursor, token, limit, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Opens or resumes a direct message or multi-person direct message.
            /// <see href="https://api.slack.com/methods/conversations.open" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='returnIm'>
            /// Boolean, indicates you want the full IM channel definition in the response.
            /// </param>
            /// <param name='users'>
            /// Comma separated lists of users. If only one user is included, this creates
            /// a 1:1 DM.  The ordering of the users is preserved whenever a multi-person
            /// direct message is returned. Supply a `channel` when not supplying `users`.
            /// </param>
            /// <param name='channel'>
            /// Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the
            /// `users` field instead.
            /// </param>
            public static OpenOKResponse Open(this IConversations operations, string token = default(string), bool? returnIm = default(bool?), string users = default(string), string channel = default(string))
            {
                return operations.OpenAsync(token, returnIm, users, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Opens or resumes a direct message or multi-person direct message.
            /// <see href="https://api.slack.com/methods/conversations.open" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='returnIm'>
            /// Boolean, indicates you want the full IM channel definition in the response.
            /// </param>
            /// <param name='users'>
            /// Comma separated lists of users. If only one user is included, this creates
            /// a 1:1 DM.  The ordering of the users is preserved whenever a multi-person
            /// direct message is returned. Supply a `channel` when not supplying `users`.
            /// </param>
            /// <param name='channel'>
            /// Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the
            /// `users` field instead.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OpenOKResponse> OpenAsync(this IConversations operations, string token = default(string), bool? returnIm = default(bool?), string users = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OpenWithHttpMessagesAsync(token, returnIm, users, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Renames a conversation.
            /// <see href="https://api.slack.com/methods/conversations.rename" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='name'>
            /// New name for conversation.
            /// </param>
            /// <param name='channel'>
            /// ID of conversation to rename
            /// </param>
            public static RenameOKResponseModel Rename(this IConversations operations, string token = default(string), string name = default(string), string channel = default(string))
            {
                return operations.RenameAsync(token, name, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Renames a conversation.
            /// <see href="https://api.slack.com/methods/conversations.rename" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='name'>
            /// New name for conversation.
            /// </param>
            /// <param name='channel'>
            /// ID of conversation to rename
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RenameOKResponseModel> RenameAsync(this IConversations operations, string token = default(string), string name = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenameWithHttpMessagesAsync(token, name, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a thread of messages posted to a conversation
            /// <see href="https://api.slack.com/methods/conversations.replies" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inclusive'>
            /// Include messages with latest or oldest timestamp in results only when
            /// either timestamp is specified.
            /// </param>
            /// <param name='ts'>
            /// Unique identifier of a thread's parent message.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:history`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the users list hasn't been
            /// reached.
            /// </param>
            /// <param name='oldest'>
            /// Start of time range of messages to include in results.
            /// </param>
            /// <param name='channel'>
            /// Conversation ID to fetch thread from.
            /// </param>
            /// <param name='latest'>
            /// End of time range of messages to include in results.
            /// </param>
            public static RepliesOKResponseModel Replies(this IConversations operations, bool? inclusive = default(bool?), string ts = default(string), string cursor = default(string), string token = default(string), int? limit = default(int?), string oldest = default(string), string channel = default(string), string latest = default(string))
            {
                return operations.RepliesAsync(inclusive, ts, cursor, token, limit, oldest, channel, latest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a thread of messages posted to a conversation
            /// <see href="https://api.slack.com/methods/conversations.replies" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inclusive'>
            /// Include messages with latest or oldest timestamp in results only when
            /// either timestamp is specified.
            /// </param>
            /// <param name='ts'>
            /// Unique identifier of a thread's parent message.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:history`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the users list hasn't been
            /// reached.
            /// </param>
            /// <param name='oldest'>
            /// Start of time range of messages to include in results.
            /// </param>
            /// <param name='channel'>
            /// Conversation ID to fetch thread from.
            /// </param>
            /// <param name='latest'>
            /// End of time range of messages to include in results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RepliesOKResponseModel> RepliesAsync(this IConversations operations, bool? inclusive = default(bool?), string ts = default(string), string cursor = default(string), string token = default(string), int? limit = default(int?), string oldest = default(string), string channel = default(string), string latest = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RepliesWithHttpMessagesAsync(inclusive, ts, cursor, token, limit, oldest, channel, latest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the purpose for a conversation.
            /// <see href="https://api.slack.com/methods/conversations.setPurpose" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='purpose'>
            /// A new, specialer purpose
            /// </param>
            /// <param name='channel'>
            /// Conversation to set the purpose of
            /// </param>
            public static SetPurposeOKResponseModel SetPurpose(this IConversations operations, string token = default(string), string purpose = default(string), string channel = default(string))
            {
                return operations.SetPurposeAsync(token, purpose, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the purpose for a conversation.
            /// <see href="https://api.slack.com/methods/conversations.setPurpose" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='purpose'>
            /// A new, specialer purpose
            /// </param>
            /// <param name='channel'>
            /// Conversation to set the purpose of
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SetPurposeOKResponseModel> SetPurposeAsync(this IConversations operations, string token = default(string), string purpose = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetPurposeWithHttpMessagesAsync(token, purpose, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the topic for a conversation.
            /// <see href="https://api.slack.com/methods/conversations.setTopic" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='topic'>
            /// The new topic string. Does not support formatting or linkification.
            /// </param>
            /// <param name='channel'>
            /// Conversation to set the topic of
            /// </param>
            public static SetTopicOKResponseModel SetTopic(this IConversations operations, string token = default(string), string topic = default(string), string channel = default(string))
            {
                return operations.SetTopicAsync(token, topic, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the topic for a conversation.
            /// <see href="https://api.slack.com/methods/conversations.setTopic" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='topic'>
            /// The new topic string. Does not support formatting or linkification.
            /// </param>
            /// <param name='channel'>
            /// Conversation to set the topic of
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SetTopicOKResponseModel> SetTopicAsync(this IConversations operations, string token = default(string), string topic = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetTopicWithHttpMessagesAsync(token, topic, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reverses conversation archival.
            /// <see href="https://api.slack.com/methods/conversations.unarchive" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='channel'>
            /// ID of conversation to unarchive
            /// </param>
            public static UnarchiveOKResponseModel Unarchive(this IConversations operations, string token = default(string), string channel = default(string))
            {
                return operations.UnarchiveAsync(token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reverses conversation archival.
            /// <see href="https://api.slack.com/methods/conversations.unarchive" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:write`
            /// </param>
            /// <param name='channel'>
            /// ID of conversation to unarchive
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UnarchiveOKResponseModel> UnarchiveAsync(this IConversations operations, string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnarchiveWithHttpMessagesAsync(token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
