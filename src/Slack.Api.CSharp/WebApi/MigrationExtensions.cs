// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Migration.
    /// </summary>
    public static partial class MigrationExtensions
    {
            /// <summary>
            /// For Enterprise Grid workspaces, map local user IDs to global user IDs
            /// <see href="https://api.slack.com/methods/migration.exchange" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `tokens.basic`
            /// </param>
            /// <param name='toOld'>
            /// Specify `true` to convert `W` global user IDs to workspace-specific `U`
            /// IDs. Defaults to `false`.
            /// </param>
            /// <param name='users'>
            /// A comma-separated list of user ids, up to 400 per request
            /// </param>
            public static ExchangeOKResponse Exchange(this IMigration operations, string token = default(string), bool? toOld = default(bool?), string users = default(string))
            {
                return operations.ExchangeAsync(token, toOld, users).GetAwaiter().GetResult();
            }

            /// <summary>
            /// For Enterprise Grid workspaces, map local user IDs to global user IDs
            /// <see href="https://api.slack.com/methods/migration.exchange" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `tokens.basic`
            /// </param>
            /// <param name='toOld'>
            /// Specify `true` to convert `W` global user IDs to workspace-specific `U`
            /// IDs. Defaults to `false`.
            /// </param>
            /// <param name='users'>
            /// A comma-separated list of user ids, up to 400 per request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExchangeOKResponse> ExchangeAsync(this IMigration operations, string token = default(string), bool? toOld = default(bool?), string users = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExchangeWithHttpMessagesAsync(token, toOld, users, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
