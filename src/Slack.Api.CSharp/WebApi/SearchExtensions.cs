// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Search.
    /// </summary>
    public static partial class SearchExtensions
    {
            /// <summary>
            /// Searches for messages and files matching a query.
            /// <see href="https://api.slack.com/methods/search.all" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortDir'>
            /// Change sort direction to ascending (`asc`) or descending (`desc`).
            /// </param>
            /// <param name='query'>
            /// Search query. May contains booleans, etc.
            /// </param>
            /// <param name='sort'>
            /// Return matches sorted by either `score` or `timestamp`.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `search:read`
            /// </param>
            /// <param name='highlight'>
            /// Pass a value of `true` to enable query highlight markers (see below).
            /// </param>
            /// <param name='page'>
            /// </param>
            public static AllOKResponse All(this ISearch operations, string sortDir = default(string), string query = default(string), string sort = default(string), string count = default(string), string token = default(string), bool? highlight = default(bool?), string page = default(string))
            {
                return operations.AllAsync(sortDir, query, sort, count, token, highlight, page).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Searches for messages and files matching a query.
            /// <see href="https://api.slack.com/methods/search.all" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortDir'>
            /// Change sort direction to ascending (`asc`) or descending (`desc`).
            /// </param>
            /// <param name='query'>
            /// Search query. May contains booleans, etc.
            /// </param>
            /// <param name='sort'>
            /// Return matches sorted by either `score` or `timestamp`.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `search:read`
            /// </param>
            /// <param name='highlight'>
            /// Pass a value of `true` to enable query highlight markers (see below).
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AllOKResponse> AllAsync(this ISearch operations, string sortDir = default(string), string query = default(string), string sort = default(string), string count = default(string), string token = default(string), bool? highlight = default(bool?), string page = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllWithHttpMessagesAsync(sortDir, query, sort, count, token, highlight, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Searches for files matching a query.
            /// <see href="https://api.slack.com/methods/search.files" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortDir'>
            /// Change sort direction to ascending (`asc`) or descending (`desc`).
            /// </param>
            /// <param name='query'>
            /// Search query.
            /// </param>
            /// <param name='sort'>
            /// Return matches sorted by either `score` or `timestamp`.
            /// </param>
            /// <param name='highlight'>
            /// Pass a value of `true` to enable query highlight markers (see below).
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `search:read`
            /// </param>
            /// <param name='page'>
            /// </param>
            public static FilesOKResponse FilesMethod(this ISearch operations, string sortDir = default(string), string query = default(string), string sort = default(string), bool? highlight = default(bool?), string count = default(string), string token = default(string), string page = default(string))
            {
                return operations.FilesMethodAsync(sortDir, query, sort, highlight, count, token, page).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Searches for files matching a query.
            /// <see href="https://api.slack.com/methods/search.files" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortDir'>
            /// Change sort direction to ascending (`asc`) or descending (`desc`).
            /// </param>
            /// <param name='query'>
            /// Search query.
            /// </param>
            /// <param name='sort'>
            /// Return matches sorted by either `score` or `timestamp`.
            /// </param>
            /// <param name='highlight'>
            /// Pass a value of `true` to enable query highlight markers (see below).
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `search:read`
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FilesOKResponse> FilesMethodAsync(this ISearch operations, string sortDir = default(string), string query = default(string), string sort = default(string), bool? highlight = default(bool?), string count = default(string), string token = default(string), string page = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FilesMethodWithHttpMessagesAsync(sortDir, query, sort, highlight, count, token, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Searches for messages matching a query.
            /// <see href="https://api.slack.com/methods/search.messages" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortDir'>
            /// Change sort direction to ascending (`asc`) or descending (`desc`).
            /// </param>
            /// <param name='query'>
            /// Search query.
            /// </param>
            /// <param name='sort'>
            /// Return matches sorted by either `score` or `timestamp`.
            /// </param>
            /// <param name='count'>
            /// Pass the number of results you want per "page". Maximum of `100`.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `search:read`
            /// </param>
            /// <param name='highlight'>
            /// Pass a value of `true` to enable query highlight markers (see below).
            /// </param>
            /// <param name='page'>
            /// </param>
            public static MessagesOKResponse Messages(this ISearch operations, string sortDir = default(string), string query = default(string), string sort = default(string), string count = default(string), string token = default(string), bool? highlight = default(bool?), string page = default(string))
            {
                return operations.MessagesAsync(sortDir, query, sort, count, token, highlight, page).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Searches for messages matching a query.
            /// <see href="https://api.slack.com/methods/search.messages" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortDir'>
            /// Change sort direction to ascending (`asc`) or descending (`desc`).
            /// </param>
            /// <param name='query'>
            /// Search query.
            /// </param>
            /// <param name='sort'>
            /// Return matches sorted by either `score` or `timestamp`.
            /// </param>
            /// <param name='count'>
            /// Pass the number of results you want per "page". Maximum of `100`.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `search:read`
            /// </param>
            /// <param name='highlight'>
            /// Pass a value of `true` to enable query highlight markers (see below).
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessagesOKResponse> MessagesAsync(this ISearch operations, string sortDir = default(string), string query = default(string), string sort = default(string), string count = default(string), string token = default(string), bool? highlight = default(bool?), string page = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MessagesWithHttpMessagesAsync(sortDir, query, sort, count, token, highlight, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
