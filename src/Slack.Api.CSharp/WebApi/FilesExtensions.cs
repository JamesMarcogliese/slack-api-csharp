// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Files.
    /// </summary>
    public static partial class FilesExtensions
    {
            /// <summary>
            /// Add a comment to an existing file.
            /// <see href="https://api.slack.com/methods/files.comments.add" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='comment'>
            /// Text of the comment to add.
            /// </param>
            /// <param name='file'>
            /// File to add a comment to.
            /// </param>
            public static AddOKResponse Add(this IFiles operations, string token = default(string), string comment = default(string), string file = default(string))
            {
                return operations.AddAsync(token, comment, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a comment to an existing file.
            /// <see href="https://api.slack.com/methods/files.comments.add" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='comment'>
            /// Text of the comment to add.
            /// </param>
            /// <param name='file'>
            /// File to add a comment to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddOKResponse> AddAsync(this IFiles operations, string token = default(string), string comment = default(string), string file = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(token, comment, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing comment on a file.
            /// <see href="https://api.slack.com/methods/files.comments.delete" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='id'>
            /// The comment to delete.
            /// </param>
            /// <param name='file'>
            /// File to delete a comment from.
            /// </param>
            public static DeleteOKResponseModel Delete(this IFiles operations, string token = default(string), string id = default(string), string file = default(string))
            {
                return operations.DeleteAsync(token, id, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing comment on a file.
            /// <see href="https://api.slack.com/methods/files.comments.delete" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='id'>
            /// The comment to delete.
            /// </param>
            /// <param name='file'>
            /// File to delete a comment from.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteOKResponseModel> DeleteAsync(this IFiles operations, string token = default(string), string id = default(string), string file = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(token, id, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edit an existing file comment.
            /// <see href="https://api.slack.com/methods/files.comments.edit" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='comment'>
            /// Text of the comment to edit.
            /// </param>
            /// <param name='id'>
            /// The comment to edit.
            /// </param>
            /// <param name='file'>
            /// File containing the comment to edit.
            /// </param>
            public static EditOKResponse Edit(this IFiles operations, string token = default(string), string comment = default(string), string id = default(string), string file = default(string))
            {
                return operations.EditAsync(token, comment, id, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edit an existing file comment.
            /// <see href="https://api.slack.com/methods/files.comments.edit" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='comment'>
            /// Text of the comment to edit.
            /// </param>
            /// <param name='id'>
            /// The comment to edit.
            /// </param>
            /// <param name='file'>
            /// File containing the comment to edit.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EditOKResponse> EditAsync(this IFiles operations, string token = default(string), string comment = default(string), string id = default(string), string file = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditWithHttpMessagesAsync(token, comment, id, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a file.
            /// <see href="https://api.slack.com/methods/files.delete" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='file'>
            /// ID of file to delete.
            /// </param>
            public static DeleteOKResponseModelModel Delete1(this IFiles operations, string token = default(string), string file = default(string))
            {
                return operations.Delete1Async(token, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a file.
            /// <see href="https://api.slack.com/methods/files.delete" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='file'>
            /// ID of file to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteOKResponseModelModel> Delete1Async(this IFiles operations, string token = default(string), string file = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Delete1WithHttpMessagesAsync(token, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about a team file.
            /// <see href="https://api.slack.com/methods/files.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:read`
            /// </param>
            /// <param name='file'>
            /// Specify a file by providing its ID.
            /// </param>
            /// <param name='page'>
            /// </param>
            public static InfoOKResponseModelModelModelModel Info(this IFiles operations, string count = default(string), string token = default(string), string file = default(string), string page = default(string))
            {
                return operations.InfoAsync(count, token, file, page).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about a team file.
            /// <see href="https://api.slack.com/methods/files.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:read`
            /// </param>
            /// <param name='file'>
            /// Specify a file by providing its ID.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfoOKResponseModelModelModelModel> InfoAsync(this IFiles operations, string count = default(string), string token = default(string), string file = default(string), string page = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InfoWithHttpMessagesAsync(count, token, file, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists &amp; filters team files.
            /// <see href="https://api.slack.com/methods/files.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='channel'>
            /// Filter files appearing in a specific channel, indicated by its ID.
            /// </param>
            /// <param name='tsTo'>
            /// Filter files created before this timestamp (inclusive).
            /// </param>
            /// <param name='tsFrom'>
            /// Filter files created after this timestamp (inclusive).
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:read`
            /// </param>
            /// <param name='user'>
            /// Filter files created by a single user.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='types'>
            /// Filter files by type:
            ///
            /// * `all` - All files
            /// * `spaces` - Posts
            /// * `snippets` - Snippets
            /// * `images` - Image files
            /// * `gdocs` - Google docs
            /// * `zips` - Zip files
            /// * `pdfs` - PDF files
            ///
            /// You can pass multiple values in the types argument, like
            /// `types=spaces,snippets`.The default value is `all`, which does not filter
            /// the list.
            /// </param>
            public static ListOKResponseModelModelModelModelModel List(this IFiles operations, string count = default(string), string channel = default(string), double? tsTo = default(double?), double? tsFrom = default(double?), string token = default(string), string user = default(string), string page = default(string), string types = default(string))
            {
                return operations.ListAsync(count, channel, tsTo, tsFrom, token, user, page, types).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists &amp; filters team files.
            /// <see href="https://api.slack.com/methods/files.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='channel'>
            /// Filter files appearing in a specific channel, indicated by its ID.
            /// </param>
            /// <param name='tsTo'>
            /// Filter files created before this timestamp (inclusive).
            /// </param>
            /// <param name='tsFrom'>
            /// Filter files created after this timestamp (inclusive).
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:read`
            /// </param>
            /// <param name='user'>
            /// Filter files created by a single user.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='types'>
            /// Filter files by type:
            ///
            /// * `all` - All files
            /// * `spaces` - Posts
            /// * `snippets` - Snippets
            /// * `images` - Image files
            /// * `gdocs` - Google docs
            /// * `zips` - Zip files
            /// * `pdfs` - PDF files
            ///
            /// You can pass multiple values in the types argument, like
            /// `types=spaces,snippets`.The default value is `all`, which does not filter
            /// the list.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListOKResponseModelModelModelModelModel> ListAsync(this IFiles operations, string count = default(string), string channel = default(string), double? tsTo = default(double?), double? tsFrom = default(double?), string token = default(string), string user = default(string), string page = default(string), string types = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(count, channel, tsTo, tsFrom, token, user, page, types, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revokes public/external sharing access for a file
            /// <see href="https://api.slack.com/methods/files.revokePublicURL" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='file'>
            /// File to revoke
            /// </param>
            public static RevokePublicURLOKResponse RevokePublicURL(this IFiles operations, string token = default(string), string file = default(string))
            {
                return operations.RevokePublicURLAsync(token, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revokes public/external sharing access for a file
            /// <see href="https://api.slack.com/methods/files.revokePublicURL" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='file'>
            /// File to revoke
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RevokePublicURLOKResponse> RevokePublicURLAsync(this IFiles operations, string token = default(string), string file = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokePublicURLWithHttpMessagesAsync(token, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Enables a file for public/external sharing.
            /// <see href="https://api.slack.com/methods/files.sharedPublicURL" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='file'>
            /// File to share
            /// </param>
            public static SharedPublicURLOKResponse SharedPublicURL(this IFiles operations, string token = default(string), string file = default(string))
            {
                return operations.SharedPublicURLAsync(token, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables a file for public/external sharing.
            /// <see href="https://api.slack.com/methods/files.sharedPublicURL" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='file'>
            /// File to share
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedPublicURLOKResponse> SharedPublicURLAsync(this IFiles operations, string token = default(string), string file = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SharedPublicURLWithHttpMessagesAsync(token, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads or creates a file.
            /// <see href="https://api.slack.com/methods/files.upload" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channels'>
            /// Comma-separated list of channel names or IDs where the file will be shared.
            /// </param>
            /// <param name='title'>
            /// Title of file.
            /// </param>
            /// <param name='initialComment'>
            /// Initial comment to add to file.
            /// </param>
            /// <param name='filetype'>
            /// A [file type](/types/file#file_types) identifier.
            /// </param>
            /// <param name='filename'>
            /// Filename of file.
            /// </param>
            /// <param name='content'>
            /// File contents via a POST variable. If omitting this parameter, you must
            /// provide a `file`.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='file'>
            /// File contents via `multipart/form-data`. If omitting this parameter, you
            /// must submit `content`.
            /// </param>
            public static UploadOKResponse Upload(this IFiles operations, string channels = default(string), string title = default(string), string initialComment = default(string), string filetype = default(string), string filename = default(string), string content = default(string), string token = default(string), string file = default(string))
            {
                return operations.UploadAsync(channels, title, initialComment, filetype, filename, content, token, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads or creates a file.
            /// <see href="https://api.slack.com/methods/files.upload" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channels'>
            /// Comma-separated list of channel names or IDs where the file will be shared.
            /// </param>
            /// <param name='title'>
            /// Title of file.
            /// </param>
            /// <param name='initialComment'>
            /// Initial comment to add to file.
            /// </param>
            /// <param name='filetype'>
            /// A [file type](/types/file#file_types) identifier.
            /// </param>
            /// <param name='filename'>
            /// Filename of file.
            /// </param>
            /// <param name='content'>
            /// File contents via a POST variable. If omitting this parameter, you must
            /// provide a `file`.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `files:write:user`
            /// </param>
            /// <param name='file'>
            /// File contents via `multipart/form-data`. If omitting this parameter, you
            /// must submit `content`.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UploadOKResponse> UploadAsync(this IFiles operations, string channels = default(string), string title = default(string), string initialComment = default(string), string filetype = default(string), string filename = default(string), string content = default(string), string token = default(string), string file = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadWithHttpMessagesAsync(channels, title, initialComment, filetype, filename, content, token, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
