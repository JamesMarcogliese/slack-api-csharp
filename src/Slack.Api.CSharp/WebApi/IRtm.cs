// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Rtm operations.
    /// </summary>
    public partial interface IRtm
    {
        /// <summary>
        /// Starts a Real Time Messaging session.
        /// <see href="https://api.slack.com/methods/rtm.connect" />
        /// </summary>
        /// <param name='presenceSub'>
        /// Only deliver presence events when requested by subscription. See
        /// [presence subscriptions](/docs/presence-and-status#subscriptions).
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `rtm:stream`
        /// </param>
        /// <param name='batchPresenceAware'>
        /// Batch presence deliveries via subscription. Enabling changes the
        /// shape of `presence_change` events. See [batch
        /// presence](/docs/presence-and-status#batching).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ConnectErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ConnectOKResponse>> ConnectWithHttpMessagesAsync(bool? presenceSub = default(bool?), string token = default(string), bool? batchPresenceAware = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Starts a Real Time Messaging session.
        /// <see href="https://api.slack.com/methods/rtm.start" />
        /// </summary>
        /// <param name='noLatest'>
        /// Exclude latest timestamps for channels, groups, mpims, and ims.
        /// Automatically sets `no_unreads` to `1`
        /// </param>
        /// <param name='simpleLatest'>
        /// Return timestamp only for latest message object of each channel
        /// (improves performance).
        /// </param>
        /// <param name='includeLocale'>
        /// Set this to `true` to receive the locale for users and channels.
        /// Defaults to `false`
        /// </param>
        /// <param name='presenceSub'>
        /// Only deliver presence events when requested by subscription. See
        /// [presence subscriptions](/docs/presence-and-status#subscriptions).
        /// </param>
        /// <param name='noUnreads'>
        /// Skip unread counts for each channel (improves performance).
        /// </param>
        /// <param name='batchPresenceAware'>
        /// Batch presence deliveries via subscription. Enabling changes the
        /// shape of `presence_change` events. See [batch
        /// presence](/docs/presence-and-status#batching).
        /// </param>
        /// <param name='mpimAware'>
        /// Returns MPIMs to the client in the API response.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `rtm:stream`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="StartErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<StartOKResponse>> StartWithHttpMessagesAsync(bool? noLatest = default(bool?), bool? simpleLatest = default(bool?), bool? includeLocale = default(bool?), bool? presenceSub = default(bool?), bool? noUnreads = default(bool?), bool? batchPresenceAware = default(bool?), bool? mpimAware = default(bool?), string token = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
