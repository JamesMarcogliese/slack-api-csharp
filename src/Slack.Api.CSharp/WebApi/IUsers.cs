// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Users operations.
    /// </summary>
    public partial interface IUsers
    {
        /// <summary>
        /// List conversations the calling user may access.
        /// <see href="https://api.slack.com/methods/users.conversations" />
        /// </summary>
        /// <param name='cursor'>
        /// Paginate through collections of data by setting the `cursor`
        /// parameter to a `next_cursor` attribute returned by a previous
        /// request's `response_metadata`. Default value fetches the first
        /// "page" of the collection. See [pagination](/docs/pagination) for
        /// more detail.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:read`
        /// </param>
        /// <param name='limit'>
        /// The maximum number of items to return. Fewer than the requested
        /// number of items may be returned, even if the end of the list hasn't
        /// been reached. Must be an integer no larger than 1000.
        /// </param>
        /// <param name='user'>
        /// Browse conversations by a specific user ID's membership. Non-public
        /// channels are restricted to those where the calling user shares
        /// membership.
        /// </param>
        /// <param name='excludeArchived'>
        /// Set to `true` to exclude archived channels from the list
        /// </param>
        /// <param name='types'>
        /// Mix and match channel types by providing a comma-separated list of
        /// any combination of `public_channel`, `private_channel`, `mpim`,
        /// `im`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ConversationsErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ConversationsOKResponse>> ConversationsMethodWithHttpMessagesAsync(string cursor = default(string), string token = default(string), int? limit = default(int?), string user = default(string), bool? excludeArchived = default(bool?), string types = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete the user profile photo
        /// <see href="https://api.slack.com/methods/users.deletePhoto" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users.profile:write`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="DeletePhotoErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<DeletePhotoOKResponse>> DeletePhotoWithHttpMessagesAsync(string token = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets user presence information.
        /// <see href="https://api.slack.com/methods/users.getPresence" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users:read`
        /// </param>
        /// <param name='user'>
        /// User to get presence info on. Defaults to the authed user.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="GetPresenceErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<GetPresenceOKResponse>> GetPresenceWithHttpMessagesAsync(string token = default(string), string user = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a user's identity.
        /// <see href="https://api.slack.com/methods/users.identity" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `identity.basic`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="IdentityErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> IdentityWithHttpMessagesAsync(string token = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets information about a user.
        /// <see href="https://api.slack.com/methods/users.info" />
        /// </summary>
        /// <param name='includeLocale'>
        /// Set this to `true` to receive the locale for this user. Defaults to
        /// `false`
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users:read`
        /// </param>
        /// <param name='user'>
        /// User to get info on
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="InfoErrorModel7Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<InfoOKResponseModelModelModelModelModelModelModel>> InfoWithHttpMessagesAsync(bool? includeLocale = default(bool?), string token = default(string), string user = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists all users in a Slack team.
        /// <see href="https://api.slack.com/methods/users.list" />
        /// </summary>
        /// <param name='presence'>
        /// Deprecated. Whether to include presence data in the output.
        /// Defaults to `false`. Setting this to `true` reduces performance,
        /// especially with large teams.
        /// </param>
        /// <param name='cursor'>
        /// Paginate through collections of data by setting the `cursor`
        /// parameter to a `next_cursor` attribute returned by a previous
        /// request's `response_metadata`. Default value fetches the first
        /// "page" of the collection. See [pagination](/docs/pagination) for
        /// more detail.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users:read`
        /// </param>
        /// <param name='limit'>
        /// The maximum number of items to return. Fewer than the requested
        /// number of items may be returned, even if the end of the users list
        /// hasn't been reached.
        /// </param>
        /// <param name='includeLocale'>
        /// Set this to `true` to receive the locale for users. Defaults to
        /// `false`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ListErrorModel15Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ListOKResponseModelModelModelModelModelModelModelModelModel>> ListWithHttpMessagesAsync(bool? presence = default(bool?), string cursor = default(string), string token = default(string), int? limit = default(int?), bool? includeLocale = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find a user with an email address.
        /// <see href="https://api.slack.com/methods/users.lookupByEmail" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users:read.email`
        /// </param>
        /// <param name='email'>
        /// An email address belonging to a user in the workspace
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="LookupByEmailErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<LookupByEmailOKResponse>> LookupByEmailWithHttpMessagesAsync(string token = default(string), string email = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves a user's profile information.
        /// <see href="https://api.slack.com/methods/users.profile.get" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users.profile:read`
        /// </param>
        /// <param name='includeLabels'>
        /// Include labels for each ID in custom profile fields
        /// </param>
        /// <param name='user'>
        /// User to retrieve profile info for
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="GetErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<GetOKResponseModel>> GetWithHttpMessagesAsync(string token = default(string), bool? includeLabels = default(bool?), string user = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set the profile information for a user.
        /// <see href="https://api.slack.com/methods/users.profile.set" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users.profile:write`
        /// </param>
        /// <param name='profile'>
        /// Collection of key:value pairs presented as a URL-encoded JSON hash.
        /// </param>
        /// <param name='user'>
        /// ID of user to change. This argument may only be specified by team
        /// admins on paid teams.
        /// </param>
        /// <param name='value'>
        /// Value to set a single key to. Usable only if `profile` is not
        /// passed.
        /// </param>
        /// <param name='name'>
        /// Name of a single key to set. Usable only if `profile` is not
        /// passed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SetErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SetOKResponse>> SetWithHttpMessagesAsync(string token = default(string), string profile = default(string), string user = default(string), string value = default(string), string name = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Marked a user as active. Deprecated and non-functional.
        /// <see href="https://api.slack.com/methods/users.setActive" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users:write`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SetActiveErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SetActiveOKResponse>> SetActiveWithHttpMessagesAsync(string token = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set the user profile photo
        /// <see href="https://api.slack.com/methods/users.setPhoto" />
        /// </summary>
        /// <param name='image'>
        /// File contents via `multipart/form-data`.
        /// </param>
        /// <param name='cropW'>
        /// Width/height of crop box (always square)
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users.profile:write`
        /// </param>
        /// <param name='cropY'>
        /// Y coordinate of top-left corner of crop box
        /// </param>
        /// <param name='cropX'>
        /// X coordinate of top-left corner of crop box
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SetPhotoErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SetPhotoOKResponse>> SetPhotoWithHttpMessagesAsync(string image = default(string), int? cropW = default(int?), string token = default(string), int? cropY = default(int?), int? cropX = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manually sets user presence.
        /// <see href="https://api.slack.com/methods/users.setPresence" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `users:write`
        /// </param>
        /// <param name='presence'>
        /// Either `auto` or `away`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SetPresenceErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SetPresenceOKResponse>> SetPresenceWithHttpMessagesAsync(string token = default(string), string presence = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
