// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// users.conversations success schema
    /// </summary>
    /// <remarks>
    /// Schema for successful response from users.conversations method.
    /// Returned conversation objects do not include `num_members` or
    /// `is_member`
    /// </remarks>
    public partial class ConversationsOKResponse
    {
        /// <summary>
        /// Initializes a new instance of the ConversationsOKResponse class.
        /// </summary>
        public ConversationsOKResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConversationsOKResponse class.
        /// </summary>
        public ConversationsOKResponse(IList<object> channels, ConversationsOKResponseResponseMetadata responseMetadata = default(ConversationsOKResponseResponseMetadata))
        {
            Channels = channels;
            ResponseMetadata = responseMetadata;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for ConversationsOKResponse class.
        /// </summary>
        static ConversationsOKResponse()
        {
            Ok = true;
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "channels")]
        public IList<object> Channels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "response_metadata")]
        public ConversationsOKResponseResponseMetadata ResponseMetadata { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ok")]
        public static bool Ok { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Channels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Channels");
            }
            if (Channels != null)
            {
                if (Channels.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Channels)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Channels");
                }
            }
            if (ResponseMetadata != null)
            {
                ResponseMetadata.Validate();
            }
        }
    }
}
