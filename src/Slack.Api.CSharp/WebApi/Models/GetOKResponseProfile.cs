// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class GetOKResponseProfile
    {
        /// <summary>
        /// Initializes a new instance of the GetOKResponseProfile class.
        /// </summary>
        public GetOKResponseProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetOKResponseProfile class.
        /// </summary>
        public GetOKResponseProfile(IList<ObjsTeamProfileField> fields)
        {
            Fields = fields;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fields")]
        public IList<ObjsTeamProfileField> Fields { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Fields == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fields");
            }
            if (Fields != null)
            {
                if (Fields.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Fields", 1);
                }
                if (Fields.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Fields)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Fields");
                }
                foreach (var element in Fields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
