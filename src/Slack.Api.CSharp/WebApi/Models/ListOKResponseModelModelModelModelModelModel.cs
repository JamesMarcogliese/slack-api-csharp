// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// groups.list success schema
    /// </summary>
    /// <remarks>
    /// Schema for successful response groups.list method
    /// </remarks>
    public partial class ListOKResponseModelModelModelModelModelModel
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ListOKResponseModelModelModelModelModelModel class.
        /// </summary>
        public ListOKResponseModelModelModelModelModelModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ListOKResponseModelModelModelModelModelModel class.
        /// </summary>
        public ListOKResponseModelModelModelModelModelModel(IList<ObjsGroup> groups)
        {
            Groups = groups;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for ListOKResponseModelModelModelModelModelModel
        /// class.
        /// </summary>
        static ListOKResponseModelModelModelModelModelModel()
        {
            Ok = true;
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public IList<ObjsGroup> Groups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ok")]
        public static bool Ok { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Groups == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Groups");
            }
            if (Groups != null)
            {
                if (Groups.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Groups", 1);
                }
                if (Groups.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Groups)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Groups");
                }
                foreach (var element in Groups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
