// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Message object
    /// </summary>
    public partial class ObjsMessage
    {
        /// <summary>
        /// Initializes a new instance of the ObjsMessage class.
        /// </summary>
        public ObjsMessage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ObjsMessage class.
        /// </summary>
        public ObjsMessage(string text, string ts, string type, IList<ObjsMessageAttachmentsItem> attachments = default(IList<ObjsMessageAttachmentsItem>), object botId = default(object), ObjsComment comment = default(ObjsComment), bool? displayAsBot = default(bool?), ObjsFile file = default(ObjsFile), ObjsMessageIcons icons = default(ObjsMessageIcons), string inviter = default(string), bool? isIntro = default(bool?), string lastRead = default(string), string name = default(string), string oldName = default(string), string permalink = default(string), IList<string> pinnedTo = default(IList<string>), string purpose = default(string), IList<ObjsReaction> reactions = default(IList<ObjsReaction>), IList<ObjsMessageRepliesItem> replies = default(IList<ObjsMessageRepliesItem>), int? replyCount = default(int?), string sourceTeam = default(string), bool? subscribed = default(bool?), string subtype = default(string), string team = default(string), string threadTs = default(string), string topic = default(string), int? unreadCount = default(int?), bool? upload = default(bool?), string user = default(string), ObjsUserProfileShort userProfile = default(ObjsUserProfileShort), string userTeam = default(string), string username = default(string))
        {
            Attachments = attachments;
            BotId = botId;
            Comment = comment;
            DisplayAsBot = displayAsBot;
            File = file;
            Icons = icons;
            Inviter = inviter;
            IsIntro = isIntro;
            LastRead = lastRead;
            Name = name;
            OldName = oldName;
            Permalink = permalink;
            PinnedTo = pinnedTo;
            Purpose = purpose;
            Reactions = reactions;
            Replies = replies;
            ReplyCount = replyCount;
            SourceTeam = sourceTeam;
            Subscribed = subscribed;
            Subtype = subtype;
            Team = team;
            Text = text;
            ThreadTs = threadTs;
            Topic = topic;
            Ts = ts;
            Type = type;
            UnreadCount = unreadCount;
            Upload = upload;
            User = user;
            UserProfile = userProfile;
            UserTeam = userTeam;
            Username = username;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attachments")]
        public IList<ObjsMessageAttachmentsItem> Attachments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bot_id")]
        public object BotId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public ObjsComment Comment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "display_as_bot")]
        public bool? DisplayAsBot { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "file")]
        public ObjsFile File { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "icons")]
        public ObjsMessageIcons Icons { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inviter")]
        public string Inviter { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "is_intro")]
        public bool? IsIntro { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "last_read")]
        public string LastRead { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "old_name")]
        public string OldName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "permalink")]
        public string Permalink { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pinned_to")]
        public IList<string> PinnedTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "purpose")]
        public string Purpose { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reactions")]
        public IList<ObjsReaction> Reactions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "replies")]
        public IList<ObjsMessageRepliesItem> Replies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reply_count")]
        public int? ReplyCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "source_team")]
        public string SourceTeam { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subscribed")]
        public bool? Subscribed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subtype")]
        public string Subtype { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "team")]
        public string Team { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "thread_ts")]
        public string ThreadTs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "topic")]
        public string Topic { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ts")]
        public string Ts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unread_count")]
        public int? UnreadCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "upload")]
        public bool? Upload { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public string User { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "user_profile")]
        public ObjsUserProfileShort UserProfile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "user_team")]
        public string UserTeam { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Text == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Text");
            }
            if (Ts == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Ts");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Attachments != null)
            {
                if (Attachments.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Attachments", 1);
                }
                if (Attachments.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Attachments)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Attachments");
                }
                foreach (var element in Attachments)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (File != null)
            {
                File.Validate();
            }
            if (Reactions != null)
            {
                foreach (var element1 in Reactions)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Replies != null)
            {
                foreach (var element2 in Replies)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (UserProfile != null)
            {
                UserProfile.Validate();
            }
        }
    }
}
