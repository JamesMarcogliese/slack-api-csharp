// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ObjsTeamProfileField
    {
        /// <summary>
        /// Initializes a new instance of the ObjsTeamProfileField class.
        /// </summary>
        public ObjsTeamProfileField()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ObjsTeamProfileField class.
        /// </summary>
        /// <param name="type">Possible values include: 'text', 'date', 'link',
        /// 'mailto', 'options_list', 'user'</param>
        public ObjsTeamProfileField(string hint, string id, string label, IList<string> options, int ordering, string type, string fieldName = default(string), bool? isHidden = default(bool?), IList<string> possibleValues = default(IList<string>))
        {
            FieldName = fieldName;
            Hint = hint;
            Id = id;
            IsHidden = isHidden;
            Label = label;
            Options = options;
            Ordering = ordering;
            PossibleValues = possibleValues;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "field_name")]
        public string FieldName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hint")]
        public string Hint { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "is_hidden")]
        public bool? IsHidden { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "options")]
        public IList<string> Options { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ordering")]
        public int Ordering { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "possible_values")]
        public IList<string> PossibleValues { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'text', 'date', 'link',
        /// 'mailto', 'options_list', 'user'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Hint == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Hint");
            }
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Label == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Label");
            }
            if (Options == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Options");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Id != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Id, "^X[a-zA-Z0-9]{9}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Id", "^X[a-zA-Z0-9]{9}$");
                }
            }
        }
    }
}
