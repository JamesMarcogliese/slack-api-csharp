// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// rtm.connect schema
    /// </summary>
    /// <remarks>
    /// Schema for successful response from rtm.connect method
    /// </remarks>
    public partial class ConnectOKResponse
    {
        /// <summary>
        /// Initializes a new instance of the ConnectOKResponse class.
        /// </summary>
        public ConnectOKResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectOKResponse class.
        /// </summary>
        public ConnectOKResponse(ConnectOKResponseSelf self, ConnectOKResponseTeam team, string url)
        {
            Self = self;
            Team = team;
            Url = url;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for ConnectOKResponse class.
        /// </summary>
        static ConnectOKResponse()
        {
            Ok = true;
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "self")]
        public ConnectOKResponseSelf Self { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "team")]
        public ConnectOKResponseTeam Team { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ok")]
        public static bool Ok { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Self == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Self");
            }
            if (Team == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Team");
            }
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (Self != null)
            {
                Self.Validate();
            }
            if (Team != null)
            {
                Team.Validate();
            }
        }
    }
}
