// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Team Prefs Object
    /// </summary>
    public partial class TeamPrefsPrefs
    {
        /// <summary>
        /// Initializes a new instance of the TeamPrefsPrefs class.
        /// </summary>
        public TeamPrefsPrefs()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TeamPrefsPrefs class.
        /// </summary>
        public TeamPrefsPrefs(IList<string> defaultChannels, bool? allUsersCanPurchase = default(bool?), bool? allowCalls = default(bool?), bool? allowCallsInteractiveScreenSharing = default(bool?), bool? allowMessageDeletion = default(bool?), bool? allowRetentionOverride = default(bool?), bool? allowSharedChannelPermsOverride = default(bool?), bool? appWhitelistEnabled = default(bool?), string authMode = default(string), string callingAppName = default(string), bool? canReceiveSharedChannelsInvites = default(bool?), int? complianceExportStart = default(int?), string customStatusDefaultEmoji = default(string), IList<IList<string>> customStatusPresets = default(IList<IList<string>>), bool? customTos = default(bool?), IList<string> defaultRxns = default(IList<string>), bool? disableEmailIngestion = default(bool?), bool? disableFileDeleting = default(bool?), bool? disableFileEditing = default(bool?), string disableFileUploads = default(string), bool? disallowPublicFileUrls = default(bool?), string discoverable = default(string), bool? displayEmailAddresses = default(bool?), bool? displayRealNames = default(bool?), int? dmRetentionDuration = default(int?), int? dmRetentionType = default(int?), bool? dndEnabled = default(bool?), string dndEndHour = default(string), string dndStartHour = default(string), int? enableSharedChannels = default(int?), IList<object> enterpriseDefaultChannels = default(IList<object>), IList<object> enterpriseMandatoryChannels = default(IList<object>), int? enterpriseMdmDateEnabled = default(int?), int? enterpriseMdmLevel = default(int?), TeamPrefsPrefsEnterpriseTeamCreationRequest enterpriseTeamCreationRequest = default(TeamPrefsPrefsEnterpriseTeamCreationRequest), bool? fileLimitWhitelisted = default(bool?), int? fileRetentionDuration = default(int?), int? fileRetentionType = default(int?), bool? gdriveEnabledTeam = default(bool?), int? groupRetentionDuration = default(int?), int? groupRetentionType = default(int?), bool? hideReferers = default(bool?), bool? invitesLimit = default(bool?), bool? invitesOnlyAdmins = default(bool?), string locale = default(string), int? loudChannelMentionsLimit = default(int?), int? msgEditWindowMins = default(int?), bool? requireAtForMention = default(bool?), int? retentionDuration = default(int?), int? retentionType = default(int?), bool? showJoinLeave = default(bool?), bool? usesCustomizedCustomStatusPresets = default(bool?), string warnBeforeAtChannel = default(string), string whoCanArchiveChannels = default(string), string whoCanAtChannel = default(string), string whoCanAtEveryone = default(string), string whoCanChangeTeamProfile = default(string), string whoCanCreateChannels = default(string), string whoCanCreateDeleteUserGroups = default(string), string whoCanCreateGroups = default(string), string whoCanCreateSharedChannels = default(string), string whoCanEditUserGroups = default(string), string whoCanKickChannels = default(string), string whoCanKickGroups = default(string), TeamPrefsPrefsWhoCanManageGuests whoCanManageGuests = default(TeamPrefsPrefsWhoCanManageGuests), TeamPrefsPrefsWhoCanManageIntegrations whoCanManageIntegrations = default(TeamPrefsPrefsWhoCanManageIntegrations), TeamPrefsPrefsWhoCanManageSharedChannels whoCanManageSharedChannels = default(TeamPrefsPrefsWhoCanManageSharedChannels), string whoCanPostGeneral = default(string), TeamPrefsPrefsWhoCanPostInSharedChannels whoCanPostInSharedChannels = default(TeamPrefsPrefsWhoCanPostInSharedChannels), string whoHasTeamVisibility = default(string))
        {
            AllUsersCanPurchase = allUsersCanPurchase;
            AllowCalls = allowCalls;
            AllowCallsInteractiveScreenSharing = allowCallsInteractiveScreenSharing;
            AllowMessageDeletion = allowMessageDeletion;
            AllowRetentionOverride = allowRetentionOverride;
            AllowSharedChannelPermsOverride = allowSharedChannelPermsOverride;
            AppWhitelistEnabled = appWhitelistEnabled;
            AuthMode = authMode;
            CallingAppName = callingAppName;
            CanReceiveSharedChannelsInvites = canReceiveSharedChannelsInvites;
            ComplianceExportStart = complianceExportStart;
            CustomStatusDefaultEmoji = customStatusDefaultEmoji;
            CustomStatusPresets = customStatusPresets;
            CustomTos = customTos;
            DefaultChannels = defaultChannels;
            DefaultRxns = defaultRxns;
            DisableEmailIngestion = disableEmailIngestion;
            DisableFileDeleting = disableFileDeleting;
            DisableFileEditing = disableFileEditing;
            DisableFileUploads = disableFileUploads;
            DisallowPublicFileUrls = disallowPublicFileUrls;
            Discoverable = discoverable;
            DisplayEmailAddresses = displayEmailAddresses;
            DisplayRealNames = displayRealNames;
            DmRetentionDuration = dmRetentionDuration;
            DmRetentionType = dmRetentionType;
            DndEnabled = dndEnabled;
            DndEndHour = dndEndHour;
            DndStartHour = dndStartHour;
            EnableSharedChannels = enableSharedChannels;
            EnterpriseDefaultChannels = enterpriseDefaultChannels;
            EnterpriseMandatoryChannels = enterpriseMandatoryChannels;
            EnterpriseMdmDateEnabled = enterpriseMdmDateEnabled;
            EnterpriseMdmLevel = enterpriseMdmLevel;
            EnterpriseTeamCreationRequest = enterpriseTeamCreationRequest;
            FileLimitWhitelisted = fileLimitWhitelisted;
            FileRetentionDuration = fileRetentionDuration;
            FileRetentionType = fileRetentionType;
            GdriveEnabledTeam = gdriveEnabledTeam;
            GroupRetentionDuration = groupRetentionDuration;
            GroupRetentionType = groupRetentionType;
            HideReferers = hideReferers;
            InvitesLimit = invitesLimit;
            InvitesOnlyAdmins = invitesOnlyAdmins;
            Locale = locale;
            LoudChannelMentionsLimit = loudChannelMentionsLimit;
            MsgEditWindowMins = msgEditWindowMins;
            RequireAtForMention = requireAtForMention;
            RetentionDuration = retentionDuration;
            RetentionType = retentionType;
            ShowJoinLeave = showJoinLeave;
            UsesCustomizedCustomStatusPresets = usesCustomizedCustomStatusPresets;
            WarnBeforeAtChannel = warnBeforeAtChannel;
            WhoCanArchiveChannels = whoCanArchiveChannels;
            WhoCanAtChannel = whoCanAtChannel;
            WhoCanAtEveryone = whoCanAtEveryone;
            WhoCanChangeTeamProfile = whoCanChangeTeamProfile;
            WhoCanCreateChannels = whoCanCreateChannels;
            WhoCanCreateDeleteUserGroups = whoCanCreateDeleteUserGroups;
            WhoCanCreateGroups = whoCanCreateGroups;
            WhoCanCreateSharedChannels = whoCanCreateSharedChannels;
            WhoCanEditUserGroups = whoCanEditUserGroups;
            WhoCanKickChannels = whoCanKickChannels;
            WhoCanKickGroups = whoCanKickGroups;
            WhoCanManageGuests = whoCanManageGuests;
            WhoCanManageIntegrations = whoCanManageIntegrations;
            WhoCanManageSharedChannels = whoCanManageSharedChannels;
            WhoCanPostGeneral = whoCanPostGeneral;
            WhoCanPostInSharedChannels = whoCanPostInSharedChannels;
            WhoHasTeamVisibility = whoHasTeamVisibility;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "all_users_can_purchase")]
        public bool? AllUsersCanPurchase { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allow_calls")]
        public bool? AllowCalls { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allow_calls_interactive_screen_sharing")]
        public bool? AllowCallsInteractiveScreenSharing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allow_message_deletion")]
        public bool? AllowMessageDeletion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allow_retention_override")]
        public bool? AllowRetentionOverride { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allow_shared_channel_perms_override")]
        public bool? AllowSharedChannelPermsOverride { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "app_whitelist_enabled")]
        public bool? AppWhitelistEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "auth_mode")]
        public string AuthMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calling_app_name")]
        public string CallingAppName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "can_receive_shared_channels_invites")]
        public bool? CanReceiveSharedChannelsInvites { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "compliance_export_start")]
        public int? ComplianceExportStart { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "custom_status_default_emoji")]
        public string CustomStatusDefaultEmoji { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "custom_status_presets")]
        public IList<IList<string>> CustomStatusPresets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "custom_tos")]
        public bool? CustomTos { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "default_channels")]
        public IList<string> DefaultChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "default_rxns")]
        public IList<string> DefaultRxns { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "disable_email_ingestion")]
        public bool? DisableEmailIngestion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "disable_file_deleting")]
        public bool? DisableFileDeleting { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "disable_file_editing")]
        public bool? DisableFileEditing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "disable_file_uploads")]
        public string DisableFileUploads { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "disallow_public_file_urls")]
        public bool? DisallowPublicFileUrls { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "discoverable")]
        public string Discoverable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "display_email_addresses")]
        public bool? DisplayEmailAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "display_real_names")]
        public bool? DisplayRealNames { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dm_retention_duration")]
        public int? DmRetentionDuration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dm_retention_type")]
        public int? DmRetentionType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dnd_enabled")]
        public bool? DndEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dnd_end_hour")]
        public string DndEndHour { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dnd_start_hour")]
        public string DndStartHour { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enable_shared_channels")]
        public int? EnableSharedChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enterprise_default_channels")]
        public IList<object> EnterpriseDefaultChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enterprise_mandatory_channels")]
        public IList<object> EnterpriseMandatoryChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enterprise_mdm_date_enabled")]
        public int? EnterpriseMdmDateEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enterprise_mdm_level")]
        public int? EnterpriseMdmLevel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enterprise_team_creation_request")]
        public TeamPrefsPrefsEnterpriseTeamCreationRequest EnterpriseTeamCreationRequest { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "file_limit_whitelisted")]
        public bool? FileLimitWhitelisted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "file_retention_duration")]
        public int? FileRetentionDuration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "file_retention_type")]
        public int? FileRetentionType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gdrive_enabled_team")]
        public bool? GdriveEnabledTeam { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "group_retention_duration")]
        public int? GroupRetentionDuration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "group_retention_type")]
        public int? GroupRetentionType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hide_referers")]
        public bool? HideReferers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "invites_limit")]
        public bool? InvitesLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "invites_only_admins")]
        public bool? InvitesOnlyAdmins { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "loud_channel_mentions_limit")]
        public int? LoudChannelMentionsLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "msg_edit_window_mins")]
        public int? MsgEditWindowMins { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "require_at_for_mention")]
        public bool? RequireAtForMention { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "retention_duration")]
        public int? RetentionDuration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "retention_type")]
        public int? RetentionType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "show_join_leave")]
        public bool? ShowJoinLeave { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uses_customized_custom_status_presets")]
        public bool? UsesCustomizedCustomStatusPresets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "warn_before_at_channel")]
        public string WarnBeforeAtChannel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_archive_channels")]
        public string WhoCanArchiveChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_at_channel")]
        public string WhoCanAtChannel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_at_everyone")]
        public string WhoCanAtEveryone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_change_team_profile")]
        public string WhoCanChangeTeamProfile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_create_channels")]
        public string WhoCanCreateChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_create_delete_user_groups")]
        public string WhoCanCreateDeleteUserGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_create_groups")]
        public string WhoCanCreateGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_create_shared_channels")]
        public string WhoCanCreateSharedChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_edit_user_groups")]
        public string WhoCanEditUserGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_kick_channels")]
        public string WhoCanKickChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_kick_groups")]
        public string WhoCanKickGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_manage_guests")]
        public TeamPrefsPrefsWhoCanManageGuests WhoCanManageGuests { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_manage_integrations")]
        public TeamPrefsPrefsWhoCanManageIntegrations WhoCanManageIntegrations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_manage_shared_channels")]
        public TeamPrefsPrefsWhoCanManageSharedChannels WhoCanManageSharedChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_post_general")]
        public string WhoCanPostGeneral { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_can_post_in_shared_channels")]
        public TeamPrefsPrefsWhoCanPostInSharedChannels WhoCanPostInSharedChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "who_has_team_visibility")]
        public string WhoHasTeamVisibility { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DefaultChannels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DefaultChannels");
            }
            if (CustomStatusPresets != null)
            {
                if (CustomStatusPresets.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "CustomStatusPresets", 1);
                }
                if (CustomStatusPresets.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(CustomStatusPresets)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "CustomStatusPresets");
                }
            }
            if (EnterpriseTeamCreationRequest != null)
            {
                EnterpriseTeamCreationRequest.Validate();
            }
            if (WhoCanManageGuests != null)
            {
                WhoCanManageGuests.Validate();
            }
            if (WhoCanManageIntegrations != null)
            {
                WhoCanManageIntegrations.Validate();
            }
            if (WhoCanManageSharedChannels != null)
            {
                WhoCanManageSharedChannels.Validate();
            }
            if (WhoCanPostInSharedChannels != null)
            {
                WhoCanPostInSharedChannels.Validate();
            }
        }
    }
}
