// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class StartOKResponseSelf
    {
        /// <summary>
        /// Initializes a new instance of the StartOKResponseSelf class.
        /// </summary>
        public StartOKResponseSelf()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StartOKResponseSelf class.
        /// </summary>
        public StartOKResponseSelf(int created, string id, string manualPresence, PrefsPrefs prefs, string name = default(string))
        {
            Created = created;
            Id = id;
            ManualPresence = manualPresence;
            Name = name;
            Prefs = prefs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public int Created { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "manual_presence")]
        public string ManualPresence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prefs")]
        public PrefsPrefs Prefs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (ManualPresence == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ManualPresence");
            }
            if (Prefs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Prefs");
            }
        }
    }
}
