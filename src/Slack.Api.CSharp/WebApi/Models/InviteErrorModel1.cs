// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// conversations.invite error schema
    /// </summary>
    /// <remarks>
    /// Schema for error response from conversations.invite method
    /// </remarks>
    public partial class InviteErrorModel1
    {
        /// <summary>
        /// Initializes a new instance of the InviteErrorModel1 class.
        /// </summary>
        public InviteErrorModel1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InviteErrorModel1 class.
        /// </summary>
        /// <param name="error">Possible values include:
        /// 'method_not_supported_for_channel_type', 'missing_scope',
        /// 'channel_not_found', 'user_not_found', 'cant_invite_self',
        /// 'not_in_channel', 'already_in_channel', 'is_archived',
        /// 'cant_invite', 'too_many_users', 'ura_max_channels', 'not_authed',
        /// 'invalid_auth', 'account_inactive', 'user_is_bot',
        /// 'user_is_restricted', 'user_is_ultra_restricted',
        /// 'invalid_arg_name', 'invalid_array_arg', 'invalid_charset',
        /// 'invalid_form_data', 'invalid_post_type', 'missing_post_type',
        /// 'invalid_json', 'json_not_object', 'request_timeout',
        /// 'upgrade_required', 'team_added_to_org', 'missing_charset',
        /// 'superfluous_charset'</param>
        /// <param name="errors">errors is returned when an error associates an
        /// user</param>
        public InviteErrorModel1(string error = default(string), IList<InviteErrorModelErrorsItem> errors = default(IList<InviteErrorModelErrorsItem>), string needed = default(string), string provided = default(string))
        {
            Error = error;
            Errors = errors;
            Needed = needed;
            Provided = provided;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for InviteErrorModel1 class.
        /// </summary>
        static InviteErrorModel1()
        {
            Ok = false;
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include:
        /// 'method_not_supported_for_channel_type', 'missing_scope',
        /// 'channel_not_found', 'user_not_found', 'cant_invite_self',
        /// 'not_in_channel', 'already_in_channel', 'is_archived',
        /// 'cant_invite', 'too_many_users', 'ura_max_channels', 'not_authed',
        /// 'invalid_auth', 'account_inactive', 'user_is_bot',
        /// 'user_is_restricted', 'user_is_ultra_restricted',
        /// 'invalid_arg_name', 'invalid_array_arg', 'invalid_charset',
        /// 'invalid_form_data', 'invalid_post_type', 'missing_post_type',
        /// 'invalid_json', 'json_not_object', 'request_timeout',
        /// 'upgrade_required', 'team_added_to_org', 'missing_charset',
        /// 'superfluous_charset'
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public string Error { get; set; }

        /// <summary>
        /// Gets or sets errors is returned when an error associates an user
        /// </summary>
        [JsonProperty(PropertyName = "errors")]
        public IList<InviteErrorModelErrorsItem> Errors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "needed")]
        public string Needed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provided")]
        public string Provided { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ok")]
        public static bool Ok { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Errors != null)
            {
                if (Errors.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Errors", 1);
                }
                if (Errors.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Errors)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Errors");
                }
                foreach (var element in Errors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
