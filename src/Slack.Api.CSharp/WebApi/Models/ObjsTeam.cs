// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Team Object
    /// </summary>
    public partial class ObjsTeam
    {
        /// <summary>
        /// Initializes a new instance of the ObjsTeam class.
        /// </summary>
        public ObjsTeam()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ObjsTeam class.
        /// </summary>
        public ObjsTeam(string domain, string emailDomain, ObjsTeamIcon icon, string id, string name, string avatarBaseUrl = default(string), string enterpriseId = default(string), string enterpriseName = default(string), bool? hasComplianceExport = default(bool?), int? messagesCount = default(int?), int? msgEditWindowMins = default(int?), bool? overIntegrationsLimit = default(bool?), bool? overStorageLimit = default(bool?), string plan = default(string), TeamPrefsPrefs prefs = default(TeamPrefsPrefs))
        {
            AvatarBaseUrl = avatarBaseUrl;
            Domain = domain;
            EmailDomain = emailDomain;
            EnterpriseId = enterpriseId;
            EnterpriseName = enterpriseName;
            HasComplianceExport = hasComplianceExport;
            Icon = icon;
            Id = id;
            MessagesCount = messagesCount;
            MsgEditWindowMins = msgEditWindowMins;
            Name = name;
            OverIntegrationsLimit = overIntegrationsLimit;
            OverStorageLimit = overStorageLimit;
            Plan = plan;
            Prefs = prefs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "avatar_base_url")]
        public string AvatarBaseUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "domain")]
        public string Domain { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "email_domain")]
        public string EmailDomain { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enterprise_id")]
        public string EnterpriseId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enterprise_name")]
        public string EnterpriseName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "has_compliance_export")]
        public bool? HasComplianceExport { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "icon")]
        public ObjsTeamIcon Icon { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "messages_count")]
        public int? MessagesCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "msg_edit_window_mins")]
        public int? MsgEditWindowMins { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "over_integrations_limit")]
        public bool? OverIntegrationsLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "over_storage_limit")]
        public bool? OverStorageLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "plan")]
        public string Plan { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prefs")]
        public TeamPrefsPrefs Prefs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Domain == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Domain");
            }
            if (EmailDomain == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EmailDomain");
            }
            if (Icon == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Icon");
            }
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Prefs != null)
            {
                Prefs.Validate();
            }
        }
    }
}
