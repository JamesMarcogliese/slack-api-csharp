// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// rtm.start success schema
    /// </summary>
    /// <remarks>
    /// Schema for successful response from rtm.start method
    /// </remarks>
    public partial class StartOKResponse
    {
        /// <summary>
        /// Initializes a new instance of the StartOKResponse class.
        /// </summary>
        public StartOKResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StartOKResponse class.
        /// </summary>
        /// <param name="groups">Group objects present for rtm.start. Can be
        /// null when there are no groups</param>
        /// <param name="mpims">Mpim objects present for rtm.start. Can be null
        /// when there are no mpims</param>
        public StartOKResponse(IList<object> bots, int cacheTs, string cacheTsVersion, bool canManageSharedChannels, IList<object> channels, ObjsDnd dnd, IList<object> groups, IList<object> ims, string latestEventTs, IList<object> nonThreadableChannels, IList<object> readOnlyChannels, StartOKResponseSelf self, StartOKResponseSubteams subteams, ObjsTeam team, IList<object> threadOnlyChannels, string url, IList<ObjsUser> users, string cacheVersion = default(string), bool? deadPig = default(bool?), IList<object> mpims = default(IList<object>))
        {
            Bots = bots;
            CacheTs = cacheTs;
            CacheTsVersion = cacheTsVersion;
            CacheVersion = cacheVersion;
            CanManageSharedChannels = canManageSharedChannels;
            Channels = channels;
            DeadPig = deadPig;
            Dnd = dnd;
            Groups = groups;
            Ims = ims;
            LatestEventTs = latestEventTs;
            Mpims = mpims;
            NonThreadableChannels = nonThreadableChannels;
            ReadOnlyChannels = readOnlyChannels;
            Self = self;
            Subteams = subteams;
            Team = team;
            ThreadOnlyChannels = threadOnlyChannels;
            Url = url;
            Users = users;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for StartOKResponse class.
        /// </summary>
        static StartOKResponse()
        {
            Ok = true;
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bots")]
        public IList<object> Bots { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cache_ts")]
        public int CacheTs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cache_ts_version")]
        public string CacheTsVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cache_version")]
        public string CacheVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "can_manage_shared_channels")]
        public bool CanManageSharedChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "channels")]
        public IList<object> Channels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dead_pig")]
        public bool? DeadPig { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dnd")]
        public ObjsDnd Dnd { get; set; }

        /// <summary>
        /// Gets or sets group objects present for rtm.start. Can be null when
        /// there are no groups
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public IList<object> Groups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ims")]
        public IList<object> Ims { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "latest_event_ts")]
        public string LatestEventTs { get; set; }

        /// <summary>
        /// Gets or sets mpim objects present for rtm.start. Can be null when
        /// there are no mpims
        /// </summary>
        [JsonProperty(PropertyName = "mpims")]
        public IList<object> Mpims { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "non_threadable_channels")]
        public IList<object> NonThreadableChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "read_only_channels")]
        public IList<object> ReadOnlyChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "self")]
        public StartOKResponseSelf Self { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subteams")]
        public StartOKResponseSubteams Subteams { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "team")]
        public ObjsTeam Team { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "thread_only_channels")]
        public IList<object> ThreadOnlyChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "users")]
        public IList<ObjsUser> Users { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ok")]
        public static bool Ok { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Bots == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Bots");
            }
            if (CacheTsVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CacheTsVersion");
            }
            if (Channels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Channels");
            }
            if (Dnd == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Dnd");
            }
            if (Groups == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Groups");
            }
            if (Ims == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Ims");
            }
            if (LatestEventTs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LatestEventTs");
            }
            if (NonThreadableChannels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NonThreadableChannels");
            }
            if (ReadOnlyChannels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReadOnlyChannels");
            }
            if (Self == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Self");
            }
            if (Subteams == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Subteams");
            }
            if (Team == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Team");
            }
            if (ThreadOnlyChannels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ThreadOnlyChannels");
            }
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (Users == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Users");
            }
            if (Channels != null)
            {
                if (Channels.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Channels", 1);
                }
                if (Channels.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Channels)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Channels");
                }
            }
            if (Dnd != null)
            {
                Dnd.Validate();
            }
            if (Groups != null)
            {
                if (Groups.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Groups)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Groups");
                }
            }
            if (Ims != null)
            {
                if (Ims.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Ims", 1);
                }
                if (Ims.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Ims)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Ims");
                }
            }
            if (Mpims != null)
            {
                if (Mpims.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Mpims)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Mpims");
                }
            }
            if (Self != null)
            {
                Self.Validate();
            }
            if (Subteams != null)
            {
                Subteams.Validate();
            }
            if (Team != null)
            {
                Team.Validate();
            }
            if (Users != null)
            {
                if (Users.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Users", 1);
                }
                if (Users.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Users)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Users");
                }
                foreach (var element in Users)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
