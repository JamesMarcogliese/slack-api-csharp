// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Im operations.
    /// </summary>
    public partial interface IIm
    {
        /// <summary>
        /// Close a direct message channel.
        /// <see href="https://api.slack.com/methods/im.close" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `im:write`
        /// </param>
        /// <param name='channel'>
        /// Direct message channel to close.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CloseErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<CloseOKResponseModel>> CloseWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Fetches history of messages and events from direct message channel.
        /// <see href="https://api.slack.com/methods/im.history" />
        /// </summary>
        /// <param name='count'>
        /// Number of messages to return, between 1 and 1000.
        /// </param>
        /// <param name='unreads'>
        /// Include `unread_count_display` in the output?
        /// </param>
        /// <param name='inclusive'>
        /// Include messages with latest or oldest timestamp in results.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `im:history`
        /// </param>
        /// <param name='oldest'>
        /// Start of time range of messages to include in results.
        /// </param>
        /// <param name='channel'>
        /// Direct message channel to fetch history for.
        /// </param>
        /// <param name='latest'>
        /// End of time range of messages to include in results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HistoryErrorModel3Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<HistoryOKResponseModelModelModel>> HistoryWithHttpMessagesAsync(int? count = default(int?), bool? unreads = default(bool?), bool? inclusive = default(bool?), string token = default(string), string oldest = default(string), string channel = default(string), string latest = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists direct message channels for the calling user.
        /// <see href="https://api.slack.com/methods/im.list" />
        /// </summary>
        /// <param name='cursor'>
        /// Paginate through collections of data by setting the `cursor`
        /// parameter to a `next_cursor` attribute returned by a previous
        /// request's `response_metadata`. Default value fetches the first
        /// "page" of the collection. See [pagination](/docs/pagination) for
        /// more detail.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `im:read`
        /// </param>
        /// <param name='limit'>
        /// The maximum number of items to return. Fewer than the requested
        /// number of items may be returned, even if the end of the users list
        /// hasn't been reached.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ListErrorModel7Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ListOKResponseModelModelModelModelModelModelModel>> ListWithHttpMessagesAsync(string cursor = default(string), string token = default(string), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the read cursor in a direct message channel.
        /// <see href="https://api.slack.com/methods/im.mark" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `im:write`
        /// </param>
        /// <param name='ts'>
        /// Timestamp of the most recently seen message.
        /// </param>
        /// <param name='channel'>
        /// Direct message channel to set reading cursor in.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MarkErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<MarkOKResponseModelModel>> MarkWithHttpMessagesAsync(string token = default(string), string ts = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Opens a direct message channel.
        /// <see href="https://api.slack.com/methods/im.open" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `im:write`
        /// </param>
        /// <param name='returnIm'>
        /// Boolean, indicates you want the full IM channel definition in the
        /// response.
        /// </param>
        /// <param name='user'>
        /// User to open a direct message channel with.
        /// </param>
        /// <param name='includeLocale'>
        /// Set this to `true` to receive the locale for this im. Defaults to
        /// `false`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OpenErrorModel3Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<OpenOKResponseModelModel>> OpenWithHttpMessagesAsync(string token = default(string), bool? returnIm = default(bool?), string user = default(string), bool? includeLocale = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a thread of messages posted to a direct message
        /// conversation
        /// <see href="https://api.slack.com/methods/im.replies" />
        /// </summary>
        /// <param name='threadTs'>
        /// Unique identifier of a thread's parent message
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `im:history`
        /// </param>
        /// <param name='channel'>
        /// Direct message channel to fetch thread from
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RepliesErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RepliesOKResponse>> RepliesWithHttpMessagesAsync(string threadTs = default(string), string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
