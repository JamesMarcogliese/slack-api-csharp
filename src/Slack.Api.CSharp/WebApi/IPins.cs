// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Pins operations.
    /// </summary>
    public partial interface IPins
    {
        /// <summary>
        /// Pins an item to a channel.
        /// <see href="https://api.slack.com/methods/pins.add" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `pins:write`
        /// </param>
        /// <param name='fileComment'>
        /// File comment to pin.
        /// </param>
        /// <param name='timestamp'>
        /// Timestamp of the message to pin.
        /// </param>
        /// <param name='file'>
        /// File to pin.
        /// </param>
        /// <param name='channel'>
        /// Channel to pin the item in.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="AddErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<AddOKResponseModel>> AddWithHttpMessagesAsync(string token = default(string), string fileComment = default(string), string timestamp = default(string), string file = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists items pinned to a channel.
        /// <see href="https://api.slack.com/methods/pins.list" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `pins:read`
        /// </param>
        /// <param name='channel'>
        /// Channel to get pinned items for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ListErrorModel9Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> ListWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Un-pins an item from a channel.
        /// <see href="https://api.slack.com/methods/pins.remove" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `pins:write`
        /// </param>
        /// <param name='fileComment'>
        /// File comment to un-pin.
        /// </param>
        /// <param name='timestamp'>
        /// Timestamp of the message to un-pin.
        /// </param>
        /// <param name='file'>
        /// File to un-pin.
        /// </param>
        /// <param name='channel'>
        /// Channel where the item is pinned to.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RemoveErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RemoveOKResponse>> RemoveWithHttpMessagesAsync(string token = default(string), string fileComment = default(string), string timestamp = default(string), string file = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
