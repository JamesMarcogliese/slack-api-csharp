// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Emoji.
    /// </summary>
    public static partial class EmojiExtensions
    {
            /// <summary>
            /// Lists custom emoji for a team.
            /// <see href="https://api.slack.com/methods/emoji.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `emoji:read`
            /// </param>
            public static ListOKResponseModelModelModelModel List(this IEmoji operations, string token = default(string))
            {
                return operations.ListAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists custom emoji for a team.
            /// <see href="https://api.slack.com/methods/emoji.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `emoji:read`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListOKResponseModelModelModelModel> ListAsync(this IEmoji operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
