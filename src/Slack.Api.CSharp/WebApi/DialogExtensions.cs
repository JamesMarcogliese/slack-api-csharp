// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Dialog.
    /// </summary>
    public static partial class DialogExtensions
    {
            /// <summary>
            /// Open a dialog with a user
            /// <see href="https://api.slack.com/methods/dialog.open" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            /// <param name='dialog'>
            /// The dialog definition. This must be a JSON-encoded string.
            /// </param>
            /// <param name='triggerId'>
            /// Exchange a trigger to post to the user.
            /// </param>
            public static OpenOKResponseModel Open(this IDialog operations, string token = default(string), string dialog = default(string), string triggerId = default(string))
            {
                return operations.OpenAsync(token, dialog, triggerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Open a dialog with a user
            /// <see href="https://api.slack.com/methods/dialog.open" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            /// <param name='dialog'>
            /// The dialog definition. This must be a JSON-encoded string.
            /// </param>
            /// <param name='triggerId'>
            /// Exchange a trigger to post to the user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OpenOKResponseModel> OpenAsync(this IDialog operations, string token = default(string), string dialog = default(string), string triggerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OpenWithHttpMessagesAsync(token, dialog, triggerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
