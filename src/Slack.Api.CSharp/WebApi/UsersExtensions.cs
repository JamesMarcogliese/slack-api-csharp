// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Users.
    /// </summary>
    public static partial class UsersExtensions
    {
            /// <summary>
            /// List conversations the calling user may access.
            /// <see href="https://api.slack.com/methods/users.conversations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:read`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the list hasn't been reached.
            /// Must be an integer no larger than 1000.
            /// </param>
            /// <param name='user'>
            /// Browse conversations by a specific user ID's membership. Non-public
            /// channels are restricted to those where the calling user shares membership.
            /// </param>
            /// <param name='excludeArchived'>
            /// Set to `true` to exclude archived channels from the list
            /// </param>
            /// <param name='types'>
            /// Mix and match channel types by providing a comma-separated list of any
            /// combination of `public_channel`, `private_channel`, `mpim`, `im`
            /// </param>
            public static ConversationsOKResponse ConversationsMethod(this IUsers operations, string cursor = default(string), string token = default(string), int? limit = default(int?), string user = default(string), bool? excludeArchived = default(bool?), string types = default(string))
            {
                return operations.ConversationsMethodAsync(cursor, token, limit, user, excludeArchived, types).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List conversations the calling user may access.
            /// <see href="https://api.slack.com/methods/users.conversations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `conversations:read`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the list hasn't been reached.
            /// Must be an integer no larger than 1000.
            /// </param>
            /// <param name='user'>
            /// Browse conversations by a specific user ID's membership. Non-public
            /// channels are restricted to those where the calling user shares membership.
            /// </param>
            /// <param name='excludeArchived'>
            /// Set to `true` to exclude archived channels from the list
            /// </param>
            /// <param name='types'>
            /// Mix and match channel types by providing a comma-separated list of any
            /// combination of `public_channel`, `private_channel`, `mpim`, `im`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConversationsOKResponse> ConversationsMethodAsync(this IUsers operations, string cursor = default(string), string token = default(string), int? limit = default(int?), string user = default(string), bool? excludeArchived = default(bool?), string types = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConversationsMethodWithHttpMessagesAsync(cursor, token, limit, user, excludeArchived, types, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the user profile photo
            /// <see href="https://api.slack.com/methods/users.deletePhoto" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users.profile:write`
            /// </param>
            public static DeletePhotoOKResponse DeletePhoto(this IUsers operations, string token = default(string))
            {
                return operations.DeletePhotoAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the user profile photo
            /// <see href="https://api.slack.com/methods/users.deletePhoto" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users.profile:write`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletePhotoOKResponse> DeletePhotoAsync(this IUsers operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePhotoWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets user presence information.
            /// <see href="https://api.slack.com/methods/users.getPresence" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:read`
            /// </param>
            /// <param name='user'>
            /// User to get presence info on. Defaults to the authed user.
            /// </param>
            public static GetPresenceOKResponse GetPresence(this IUsers operations, string token = default(string), string user = default(string))
            {
                return operations.GetPresenceAsync(token, user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets user presence information.
            /// <see href="https://api.slack.com/methods/users.getPresence" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:read`
            /// </param>
            /// <param name='user'>
            /// User to get presence info on. Defaults to the authed user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetPresenceOKResponse> GetPresenceAsync(this IUsers operations, string token = default(string), string user = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPresenceWithHttpMessagesAsync(token, user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a user's identity.
            /// <see href="https://api.slack.com/methods/users.identity" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `identity.basic`
            /// </param>
            public static object Identity(this IUsers operations, string token = default(string))
            {
                return operations.IdentityAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a user's identity.
            /// <see href="https://api.slack.com/methods/users.identity" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `identity.basic`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IdentityAsync(this IUsers operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IdentityWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about a user.
            /// <see href="https://api.slack.com/methods/users.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeLocale'>
            /// Set this to `true` to receive the locale for this user. Defaults to `false`
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:read`
            /// </param>
            /// <param name='user'>
            /// User to get info on
            /// </param>
            public static InfoOKResponseModelModelModelModelModelModelModel Info(this IUsers operations, bool? includeLocale = default(bool?), string token = default(string), string user = default(string))
            {
                return operations.InfoAsync(includeLocale, token, user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about a user.
            /// <see href="https://api.slack.com/methods/users.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeLocale'>
            /// Set this to `true` to receive the locale for this user. Defaults to `false`
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:read`
            /// </param>
            /// <param name='user'>
            /// User to get info on
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfoOKResponseModelModelModelModelModelModelModel> InfoAsync(this IUsers operations, bool? includeLocale = default(bool?), string token = default(string), string user = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InfoWithHttpMessagesAsync(includeLocale, token, user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all users in a Slack team.
            /// <see href="https://api.slack.com/methods/users.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='presence'>
            /// Deprecated. Whether to include presence data in the output. Defaults to
            /// `false`. Setting this to `true` reduces performance, especially with large
            /// teams.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:read`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the users list hasn't been
            /// reached.
            /// </param>
            /// <param name='includeLocale'>
            /// Set this to `true` to receive the locale for users. Defaults to `false`
            /// </param>
            public static ListOKResponseModelModelModelModelModelModelModelModelModel List(this IUsers operations, bool? presence = default(bool?), string cursor = default(string), string token = default(string), int? limit = default(int?), bool? includeLocale = default(bool?))
            {
                return operations.ListAsync(presence, cursor, token, limit, includeLocale).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all users in a Slack team.
            /// <see href="https://api.slack.com/methods/users.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='presence'>
            /// Deprecated. Whether to include presence data in the output. Defaults to
            /// `false`. Setting this to `true` reduces performance, especially with large
            /// teams.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:read`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return. Fewer than the requested number of
            /// items may be returned, even if the end of the users list hasn't been
            /// reached.
            /// </param>
            /// <param name='includeLocale'>
            /// Set this to `true` to receive the locale for users. Defaults to `false`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListOKResponseModelModelModelModelModelModelModelModelModel> ListAsync(this IUsers operations, bool? presence = default(bool?), string cursor = default(string), string token = default(string), int? limit = default(int?), bool? includeLocale = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(presence, cursor, token, limit, includeLocale, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find a user with an email address.
            /// <see href="https://api.slack.com/methods/users.lookupByEmail" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:read.email`
            /// </param>
            /// <param name='email'>
            /// An email address belonging to a user in the workspace
            /// </param>
            public static LookupByEmailOKResponse LookupByEmail(this IUsers operations, string token = default(string), string email = default(string))
            {
                return operations.LookupByEmailAsync(token, email).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find a user with an email address.
            /// <see href="https://api.slack.com/methods/users.lookupByEmail" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:read.email`
            /// </param>
            /// <param name='email'>
            /// An email address belonging to a user in the workspace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LookupByEmailOKResponse> LookupByEmailAsync(this IUsers operations, string token = default(string), string email = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LookupByEmailWithHttpMessagesAsync(token, email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a user's profile information.
            /// <see href="https://api.slack.com/methods/users.profile.get" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users.profile:read`
            /// </param>
            /// <param name='includeLabels'>
            /// Include labels for each ID in custom profile fields
            /// </param>
            /// <param name='user'>
            /// User to retrieve profile info for
            /// </param>
            public static GetOKResponseModel Get(this IUsers operations, string token = default(string), bool? includeLabels = default(bool?), string user = default(string))
            {
                return operations.GetAsync(token, includeLabels, user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a user's profile information.
            /// <see href="https://api.slack.com/methods/users.profile.get" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users.profile:read`
            /// </param>
            /// <param name='includeLabels'>
            /// Include labels for each ID in custom profile fields
            /// </param>
            /// <param name='user'>
            /// User to retrieve profile info for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetOKResponseModel> GetAsync(this IUsers operations, string token = default(string), bool? includeLabels = default(bool?), string user = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(token, includeLabels, user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set the profile information for a user.
            /// <see href="https://api.slack.com/methods/users.profile.set" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users.profile:write`
            /// </param>
            /// <param name='profile'>
            /// Collection of key:value pairs presented as a URL-encoded JSON hash.
            /// </param>
            /// <param name='user'>
            /// ID of user to change. This argument may only be specified by team admins on
            /// paid teams.
            /// </param>
            /// <param name='value'>
            /// Value to set a single key to. Usable only if `profile` is not passed.
            /// </param>
            /// <param name='name'>
            /// Name of a single key to set. Usable only if `profile` is not passed.
            /// </param>
            public static SetOKResponse Set(this IUsers operations, string token = default(string), string profile = default(string), string user = default(string), string value = default(string), string name = default(string))
            {
                return operations.SetAsync(token, profile, user, value, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set the profile information for a user.
            /// <see href="https://api.slack.com/methods/users.profile.set" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users.profile:write`
            /// </param>
            /// <param name='profile'>
            /// Collection of key:value pairs presented as a URL-encoded JSON hash.
            /// </param>
            /// <param name='user'>
            /// ID of user to change. This argument may only be specified by team admins on
            /// paid teams.
            /// </param>
            /// <param name='value'>
            /// Value to set a single key to. Usable only if `profile` is not passed.
            /// </param>
            /// <param name='name'>
            /// Name of a single key to set. Usable only if `profile` is not passed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SetOKResponse> SetAsync(this IUsers operations, string token = default(string), string profile = default(string), string user = default(string), string value = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetWithHttpMessagesAsync(token, profile, user, value, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Marked a user as active. Deprecated and non-functional.
            /// <see href="https://api.slack.com/methods/users.setActive" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:write`
            /// </param>
            public static SetActiveOKResponse SetActive(this IUsers operations, string token = default(string))
            {
                return operations.SetActiveAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marked a user as active. Deprecated and non-functional.
            /// <see href="https://api.slack.com/methods/users.setActive" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:write`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SetActiveOKResponse> SetActiveAsync(this IUsers operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetActiveWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set the user profile photo
            /// <see href="https://api.slack.com/methods/users.setPhoto" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// File contents via `multipart/form-data`.
            /// </param>
            /// <param name='cropW'>
            /// Width/height of crop box (always square)
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users.profile:write`
            /// </param>
            /// <param name='cropY'>
            /// Y coordinate of top-left corner of crop box
            /// </param>
            /// <param name='cropX'>
            /// X coordinate of top-left corner of crop box
            /// </param>
            public static SetPhotoOKResponse SetPhoto(this IUsers operations, string image = default(string), int? cropW = default(int?), string token = default(string), int? cropY = default(int?), int? cropX = default(int?))
            {
                return operations.SetPhotoAsync(image, cropW, token, cropY, cropX).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set the user profile photo
            /// <see href="https://api.slack.com/methods/users.setPhoto" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// File contents via `multipart/form-data`.
            /// </param>
            /// <param name='cropW'>
            /// Width/height of crop box (always square)
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users.profile:write`
            /// </param>
            /// <param name='cropY'>
            /// Y coordinate of top-left corner of crop box
            /// </param>
            /// <param name='cropX'>
            /// X coordinate of top-left corner of crop box
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SetPhotoOKResponse> SetPhotoAsync(this IUsers operations, string image = default(string), int? cropW = default(int?), string token = default(string), int? cropY = default(int?), int? cropX = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetPhotoWithHttpMessagesAsync(image, cropW, token, cropY, cropX, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Manually sets user presence.
            /// <see href="https://api.slack.com/methods/users.setPresence" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:write`
            /// </param>
            /// <param name='presence'>
            /// Either `auto` or `away`
            /// </param>
            public static SetPresenceOKResponse SetPresence(this IUsers operations, string token = default(string), string presence = default(string))
            {
                return operations.SetPresenceAsync(token, presence).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Manually sets user presence.
            /// <see href="https://api.slack.com/methods/users.setPresence" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users:write`
            /// </param>
            /// <param name='presence'>
            /// Either `auto` or `away`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SetPresenceOKResponse> SetPresenceAsync(this IUsers operations, string token = default(string), string presence = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetPresenceWithHttpMessagesAsync(token, presence, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
