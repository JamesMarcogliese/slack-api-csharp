// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Team.
    /// </summary>
    public static partial class TeamExtensions
    {
            /// <summary>
            /// Gets the access logs for the current team.
            /// <see href="https://api.slack.com/methods/team.accessLogs" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `admin`
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='before'>
            /// End of time range of logs to include in results (inclusive).
            /// </param>
            public static AccessLogsOKResponse AccessLogs(this ITeam operations, string count = default(string), string token = default(string), string page = default(string), int? before = default(int?))
            {
                return operations.AccessLogsAsync(count, token, page, before).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the access logs for the current team.
            /// <see href="https://api.slack.com/methods/team.accessLogs" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `admin`
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='before'>
            /// End of time range of logs to include in results (inclusive).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessLogsOKResponse> AccessLogsAsync(this ITeam operations, string count = default(string), string token = default(string), string page = default(string), int? before = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AccessLogsWithHttpMessagesAsync(count, token, page, before, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets billable users information for the current team.
            /// <see href="https://api.slack.com/methods/team.billableInfo" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `admin`
            /// </param>
            /// <param name='user'>
            /// A user to retrieve the billable information for. Defaults to all users.
            /// </param>
            public static BillableInfoOKResponse BillableInfo(this ITeam operations, string token = default(string), string user = default(string))
            {
                return operations.BillableInfoAsync(token, user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets billable users information for the current team.
            /// <see href="https://api.slack.com/methods/team.billableInfo" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `admin`
            /// </param>
            /// <param name='user'>
            /// A user to retrieve the billable information for. Defaults to all users.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BillableInfoOKResponse> BillableInfoAsync(this ITeam operations, string token = default(string), string user = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BillableInfoWithHttpMessagesAsync(token, user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the current team.
            /// <see href="https://api.slack.com/methods/team.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `team:read`
            /// </param>
            public static InfoOKResponseModelModelModelModelModelModel Info(this ITeam operations, string token = default(string))
            {
                return operations.InfoAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the current team.
            /// <see href="https://api.slack.com/methods/team.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `team:read`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfoOKResponseModelModelModelModelModelModel> InfoAsync(this ITeam operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InfoWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the integration logs for the current team.
            /// <see href="https://api.slack.com/methods/team.integrationLogs" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='changeType'>
            /// Filter logs with this change type. Defaults to all logs.
            /// </param>
            /// <param name='appId'>
            /// Filter logs to this Slack app. Defaults to all logs.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `admin`
            /// </param>
            /// <param name='user'>
            /// Filter logs generated by this user’s actions. Defaults to all logs.
            /// </param>
            /// <param name='serviceId'>
            /// Filter logs to this service. Defaults to all logs.
            /// </param>
            /// <param name='page'>
            /// </param>
            public static IntegrationLogsOKResponse IntegrationLogs(this ITeam operations, string count = default(string), string changeType = default(string), int? appId = default(int?), string token = default(string), string user = default(string), int? serviceId = default(int?), string page = default(string))
            {
                return operations.IntegrationLogsAsync(count, changeType, appId, token, user, serviceId, page).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the integration logs for the current team.
            /// <see href="https://api.slack.com/methods/team.integrationLogs" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='changeType'>
            /// Filter logs with this change type. Defaults to all logs.
            /// </param>
            /// <param name='appId'>
            /// Filter logs to this Slack app. Defaults to all logs.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `admin`
            /// </param>
            /// <param name='user'>
            /// Filter logs generated by this user’s actions. Defaults to all logs.
            /// </param>
            /// <param name='serviceId'>
            /// Filter logs to this service. Defaults to all logs.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationLogsOKResponse> IntegrationLogsAsync(this ITeam operations, string count = default(string), string changeType = default(string), int? appId = default(int?), string token = default(string), string user = default(string), int? serviceId = default(int?), string page = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IntegrationLogsWithHttpMessagesAsync(count, changeType, appId, token, user, serviceId, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a team's profile.
            /// <see href="https://api.slack.com/methods/team.profile.get" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users.profile:read`
            /// </param>
            /// <param name='visibility'>
            /// Filter by visibility.
            /// </param>
            public static GetOKResponse Get(this ITeam operations, string token = default(string), string visibility = default(string))
            {
                return operations.GetAsync(token, visibility).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a team's profile.
            /// <see href="https://api.slack.com/methods/team.profile.get" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `users.profile:read`
            /// </param>
            /// <param name='visibility'>
            /// Filter by visibility.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetOKResponse> GetAsync(this ITeam operations, string token = default(string), string visibility = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(token, visibility, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
