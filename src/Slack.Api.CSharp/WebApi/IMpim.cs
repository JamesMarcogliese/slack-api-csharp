// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Mpim operations.
    /// </summary>
    public partial interface IMpim
    {
        /// <summary>
        /// Closes a multiparty direct message channel.
        /// <see href="https://api.slack.com/methods/mpim.close" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `mpim:write`
        /// </param>
        /// <param name='channel'>
        /// MPIM to close.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CloseErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<CloseOKResponseModel>> CloseWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Fetches history of messages and events from a multiparty direct
        /// message.
        /// <see href="https://api.slack.com/methods/mpim.history" />
        /// </summary>
        /// <param name='count'>
        /// Number of messages to return, between 1 and 1000.
        /// </param>
        /// <param name='unreads'>
        /// Include `unread_count_display` in the output?
        /// </param>
        /// <param name='inclusive'>
        /// Include messages with latest or oldest timestamp in results.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `mpim:history`
        /// </param>
        /// <param name='oldest'>
        /// Start of time range of messages to include in results.
        /// </param>
        /// <param name='channel'>
        /// Multiparty direct message to fetch history for.
        /// </param>
        /// <param name='latest'>
        /// End of time range of messages to include in results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HistoryErrorModel4Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<HistoryOKResponseModelModelModelModel>> HistoryWithHttpMessagesAsync(int? count = default(int?), bool? unreads = default(bool?), bool? inclusive = default(bool?), string token = default(string), string oldest = default(string), string channel = default(string), string latest = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists multiparty direct message channels for the calling user.
        /// <see href="https://api.slack.com/methods/mpim.list" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `mpim:read`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ListErrorModel8Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ListOKResponseModelModelModelModel>> ListWithHttpMessagesAsync(string token = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the read cursor in a multiparty direct message channel.
        /// <see href="https://api.slack.com/methods/mpim.mark" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `mpim:write`
        /// </param>
        /// <param name='ts'>
        /// Timestamp of the most recently seen message.
        /// </param>
        /// <param name='channel'>
        /// multiparty direct message channel to set reading cursor in.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MarkErrorModel3Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<MarkOKResponseModelModelModel>> MarkWithHttpMessagesAsync(string token = default(string), string ts = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// This method opens a multiparty direct message.
        /// <see href="https://api.slack.com/methods/mpim.open" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `mpim:write`
        /// </param>
        /// <param name='users'>
        /// Comma separated lists of users.  The ordering of the users is
        /// preserved whenever a MPIM group is returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OpenErrorModel4Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<OpenOKResponseModelModelModel>> OpenWithHttpMessagesAsync(string token = default(string), string users = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a thread of messages posted to a direct message
        /// conversation from a multiparty direct message.
        /// <see href="https://api.slack.com/methods/mpim.replies" />
        /// </summary>
        /// <param name='threadTs'>
        /// Unique identifier of a thread's parent message.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `mpim:history`
        /// </param>
        /// <param name='channel'>
        /// Multiparty direct message channel to fetch thread from.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RepliesErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RepliesOKResponse>> RepliesWithHttpMessagesAsync(string threadTs = default(string), string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
