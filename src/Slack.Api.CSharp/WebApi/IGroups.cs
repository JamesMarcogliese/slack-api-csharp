// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Groups operations.
    /// </summary>
    public partial interface IGroups
    {
        /// <summary>
        /// Archives a private channel.
        /// <see href="https://api.slack.com/methods/groups.archive" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='channel'>
        /// Private channel to archive
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ArchiveErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ArchiveOKResponseModelModel>> ArchiveWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a private channel.
        /// <see href="https://api.slack.com/methods/groups.create" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='validate'>
        /// Whether to return errors on invalid channel name instead of
        /// modifying it to meet the specified criteria.
        /// </param>
        /// <param name='name'>
        /// Name of private channel to create
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CreateErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<CreateOKResponseModelModel>> CreateWithHttpMessagesAsync(string token = default(string), bool? validate = default(bool?), string name = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clones and archives a private channel.
        /// <see href="https://api.slack.com/methods/groups.createChild" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='channel'>
        /// Private channel to clone and archive.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CreateChildErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<CreateChildOKResponse>> CreateChildWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Fetches history of messages and events from a private channel.
        /// <see href="https://api.slack.com/methods/groups.history" />
        /// </summary>
        /// <param name='count'>
        /// Number of messages to return, between 1 and 1000.
        /// </param>
        /// <param name='unreads'>
        /// Include `unread_count_display` in the output?
        /// </param>
        /// <param name='inclusive'>
        /// Include messages with latest or oldest timestamp in results.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:history`
        /// </param>
        /// <param name='oldest'>
        /// Start of time range of messages to include in results.
        /// </param>
        /// <param name='channel'>
        /// Private channel to fetch history for.
        /// </param>
        /// <param name='latest'>
        /// End of time range of messages to include in results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HistoryErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<HistoryOKResponseModelModel>> HistoryWithHttpMessagesAsync(int? count = default(int?), bool? unreads = default(bool?), bool? inclusive = default(bool?), string token = default(string), string oldest = default(string), string channel = default(string), string latest = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets information about a private channel.
        /// <see href="https://api.slack.com/methods/groups.info" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:read`
        /// </param>
        /// <param name='includeLocale'>
        /// Set this to `true` to receive the locale for this group. Defaults
        /// to `false`
        /// </param>
        /// <param name='channel'>
        /// Private channel to get info on
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="InfoErrorModel5Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<InfoOKResponseModelModelModelModelModel>> InfoWithHttpMessagesAsync(string token = default(string), bool? includeLocale = default(bool?), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Invites a user to a private channel.
        /// <see href="https://api.slack.com/methods/groups.invite" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='user'>
        /// User to invite.
        /// </param>
        /// <param name='channel'>
        /// Private channel to invite user to.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="InviteErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<InviteOKResponseModelModel>> InviteWithHttpMessagesAsync(string token = default(string), string user = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Removes a user from a private channel.
        /// <see href="https://api.slack.com/methods/groups.kick" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='user'>
        /// User to remove from private channel.
        /// </param>
        /// <param name='channel'>
        /// Private channel to remove user from.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="KickErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<KickOKResponseModelModel>> KickWithHttpMessagesAsync(string token = default(string), string user = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leaves a private channel.
        /// <see href="https://api.slack.com/methods/groups.leave" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='channel'>
        /// Private channel to leave
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="LeaveErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<LeaveOKResponse>> LeaveWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists private channels that the calling user has access to.
        /// <see href="https://api.slack.com/methods/groups.list" />
        /// </summary>
        /// <param name='excludeMembers'>
        /// Exclude the `members` from each `group`
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:read`
        /// </param>
        /// <param name='excludeArchived'>
        /// Don't return archived private channels.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ListErrorModel6Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ListOKResponseModelModelModelModelModelModel>> ListWithHttpMessagesAsync(bool? excludeMembers = default(bool?), string token = default(string), bool? excludeArchived = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the read cursor in a private channel.
        /// <see href="https://api.slack.com/methods/groups.mark" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='ts'>
        /// Timestamp of the most recently seen message.
        /// </param>
        /// <param name='channel'>
        /// Private channel to set reading cursor in.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MarkErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<MarkOKResponseModel>> MarkWithHttpMessagesAsync(string token = default(string), string ts = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Opens a private channel.
        /// <see href="https://api.slack.com/methods/groups.open" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='channel'>
        /// Private channel to open.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OpenErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<OpenOKResponseModel>> OpenWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Renames a private channel.
        /// <see href="https://api.slack.com/methods/groups.rename" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='validate'>
        /// Whether to return errors on invalid channel name instead of
        /// modifying it to meet the specified criteria.
        /// </param>
        /// <param name='name'>
        /// New name for private channel.
        /// </param>
        /// <param name='channel'>
        /// Private channel to rename
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RenameErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RenameOKResponseModelModel>> RenameWithHttpMessagesAsync(string token = default(string), bool? validate = default(bool?), string name = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a thread of messages posted to a private channel
        /// <see href="https://api.slack.com/methods/groups.replies" />
        /// </summary>
        /// <param name='threadTs'>
        /// Unique identifier of a thread's parent message
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:history`
        /// </param>
        /// <param name='channel'>
        /// Private channel to fetch thread from
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RepliesErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RepliesOKResponse>> RepliesWithHttpMessagesAsync(string threadTs = default(string), string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the purpose for a private channel.
        /// <see href="https://api.slack.com/methods/groups.setPurpose" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='purpose'>
        /// The new purpose
        /// </param>
        /// <param name='channel'>
        /// Private channel to set the purpose of
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SetPurposeErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SetPurposeOKResponseModelModel>> SetPurposeWithHttpMessagesAsync(string token = default(string), string purpose = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the topic for a private channel.
        /// <see href="https://api.slack.com/methods/groups.setTopic" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='topic'>
        /// The new topic
        /// </param>
        /// <param name='channel'>
        /// Private channel to set the topic of
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SetTopicErrorModel2Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SetTopicOKResponseModelModel>> SetTopicWithHttpMessagesAsync(string token = default(string), string topic = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unarchives a private channel.
        /// <see href="https://api.slack.com/methods/groups.unarchive" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `groups:write`
        /// </param>
        /// <param name='channel'>
        /// Private channel to unarchive
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="UnarchiveErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UnarchiveOKResponse>> UnarchiveWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
