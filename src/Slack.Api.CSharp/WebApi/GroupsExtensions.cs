// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Groups.
    /// </summary>
    public static partial class GroupsExtensions
    {
            /// <summary>
            /// Archives a private channel.
            /// <see href="https://api.slack.com/methods/groups.archive" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='channel'>
            /// Private channel to archive
            /// </param>
            public static ArchiveOKResponseModelModel Archive(this IGroups operations, string token = default(string), string channel = default(string))
            {
                return operations.ArchiveAsync(token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Archives a private channel.
            /// <see href="https://api.slack.com/methods/groups.archive" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='channel'>
            /// Private channel to archive
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArchiveOKResponseModelModel> ArchiveAsync(this IGroups operations, string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ArchiveWithHttpMessagesAsync(token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a private channel.
            /// <see href="https://api.slack.com/methods/groups.create" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='validate'>
            /// Whether to return errors on invalid channel name instead of modifying it to
            /// meet the specified criteria.
            /// </param>
            /// <param name='name'>
            /// Name of private channel to create
            /// </param>
            public static CreateOKResponseModelModel Create(this IGroups operations, string token = default(string), bool? validate = default(bool?), string name = default(string))
            {
                return operations.CreateAsync(token, validate, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a private channel.
            /// <see href="https://api.slack.com/methods/groups.create" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='validate'>
            /// Whether to return errors on invalid channel name instead of modifying it to
            /// meet the specified criteria.
            /// </param>
            /// <param name='name'>
            /// Name of private channel to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateOKResponseModelModel> CreateAsync(this IGroups operations, string token = default(string), bool? validate = default(bool?), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(token, validate, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Clones and archives a private channel.
            /// <see href="https://api.slack.com/methods/groups.createChild" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='channel'>
            /// Private channel to clone and archive.
            /// </param>
            public static CreateChildOKResponse CreateChild(this IGroups operations, string token = default(string), string channel = default(string))
            {
                return operations.CreateChildAsync(token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clones and archives a private channel.
            /// <see href="https://api.slack.com/methods/groups.createChild" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='channel'>
            /// Private channel to clone and archive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateChildOKResponse> CreateChildAsync(this IGroups operations, string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateChildWithHttpMessagesAsync(token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetches history of messages and events from a private channel.
            /// <see href="https://api.slack.com/methods/groups.history" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// Number of messages to return, between 1 and 1000.
            /// </param>
            /// <param name='unreads'>
            /// Include `unread_count_display` in the output?
            /// </param>
            /// <param name='inclusive'>
            /// Include messages with latest or oldest timestamp in results.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:history`
            /// </param>
            /// <param name='oldest'>
            /// Start of time range of messages to include in results.
            /// </param>
            /// <param name='channel'>
            /// Private channel to fetch history for.
            /// </param>
            /// <param name='latest'>
            /// End of time range of messages to include in results.
            /// </param>
            public static HistoryOKResponseModelModel History(this IGroups operations, int? count = default(int?), bool? unreads = default(bool?), bool? inclusive = default(bool?), string token = default(string), double? oldest = default(double?), string channel = default(string), double? latest = default(double?))
            {
                return operations.HistoryAsync(count, unreads, inclusive, token, oldest, channel, latest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetches history of messages and events from a private channel.
            /// <see href="https://api.slack.com/methods/groups.history" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// Number of messages to return, between 1 and 1000.
            /// </param>
            /// <param name='unreads'>
            /// Include `unread_count_display` in the output?
            /// </param>
            /// <param name='inclusive'>
            /// Include messages with latest or oldest timestamp in results.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:history`
            /// </param>
            /// <param name='oldest'>
            /// Start of time range of messages to include in results.
            /// </param>
            /// <param name='channel'>
            /// Private channel to fetch history for.
            /// </param>
            /// <param name='latest'>
            /// End of time range of messages to include in results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HistoryOKResponseModelModel> HistoryAsync(this IGroups operations, int? count = default(int?), bool? unreads = default(bool?), bool? inclusive = default(bool?), string token = default(string), double? oldest = default(double?), string channel = default(string), double? latest = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HistoryWithHttpMessagesAsync(count, unreads, inclusive, token, oldest, channel, latest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about a private channel.
            /// <see href="https://api.slack.com/methods/groups.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:read`
            /// </param>
            /// <param name='includeLocale'>
            /// Set this to `true` to receive the locale for this group. Defaults to
            /// `false`
            /// </param>
            /// <param name='channel'>
            /// Private channel to get info on
            /// </param>
            public static InfoOKResponseModelModelModelModelModel Info(this IGroups operations, string token = default(string), bool? includeLocale = default(bool?), string channel = default(string))
            {
                return operations.InfoAsync(token, includeLocale, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about a private channel.
            /// <see href="https://api.slack.com/methods/groups.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:read`
            /// </param>
            /// <param name='includeLocale'>
            /// Set this to `true` to receive the locale for this group. Defaults to
            /// `false`
            /// </param>
            /// <param name='channel'>
            /// Private channel to get info on
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfoOKResponseModelModelModelModelModel> InfoAsync(this IGroups operations, string token = default(string), bool? includeLocale = default(bool?), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InfoWithHttpMessagesAsync(token, includeLocale, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invites a user to a private channel.
            /// <see href="https://api.slack.com/methods/groups.invite" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='user'>
            /// User to invite.
            /// </param>
            /// <param name='channel'>
            /// Private channel to invite user to.
            /// </param>
            public static InviteOKResponseModelModel Invite(this IGroups operations, string token = default(string), string user = default(string), string channel = default(string))
            {
                return operations.InviteAsync(token, user, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invites a user to a private channel.
            /// <see href="https://api.slack.com/methods/groups.invite" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='user'>
            /// User to invite.
            /// </param>
            /// <param name='channel'>
            /// Private channel to invite user to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InviteOKResponseModelModel> InviteAsync(this IGroups operations, string token = default(string), string user = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InviteWithHttpMessagesAsync(token, user, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a user from a private channel.
            /// <see href="https://api.slack.com/methods/groups.kick" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='user'>
            /// User to remove from private channel.
            /// </param>
            /// <param name='channel'>
            /// Private channel to remove user from.
            /// </param>
            public static KickOKResponseModelModel Kick(this IGroups operations, string token = default(string), string user = default(string), string channel = default(string))
            {
                return operations.KickAsync(token, user, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a user from a private channel.
            /// <see href="https://api.slack.com/methods/groups.kick" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='user'>
            /// User to remove from private channel.
            /// </param>
            /// <param name='channel'>
            /// Private channel to remove user from.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KickOKResponseModelModel> KickAsync(this IGroups operations, string token = default(string), string user = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.KickWithHttpMessagesAsync(token, user, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Leaves a private channel.
            /// <see href="https://api.slack.com/methods/groups.leave" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='channel'>
            /// Private channel to leave
            /// </param>
            public static LeaveOKResponse Leave(this IGroups operations, string token = default(string), string channel = default(string))
            {
                return operations.LeaveAsync(token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Leaves a private channel.
            /// <see href="https://api.slack.com/methods/groups.leave" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='channel'>
            /// Private channel to leave
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LeaveOKResponse> LeaveAsync(this IGroups operations, string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LeaveWithHttpMessagesAsync(token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists private channels that the calling user has access to.
            /// <see href="https://api.slack.com/methods/groups.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='excludeMembers'>
            /// Exclude the `members` from each `group`
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:read`
            /// </param>
            /// <param name='excludeArchived'>
            /// Don't return archived private channels.
            /// </param>
            public static ListOKResponseModelModelModelModelModelModel List(this IGroups operations, bool? excludeMembers = default(bool?), string token = default(string), bool? excludeArchived = default(bool?))
            {
                return operations.ListAsync(excludeMembers, token, excludeArchived).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists private channels that the calling user has access to.
            /// <see href="https://api.slack.com/methods/groups.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='excludeMembers'>
            /// Exclude the `members` from each `group`
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:read`
            /// </param>
            /// <param name='excludeArchived'>
            /// Don't return archived private channels.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListOKResponseModelModelModelModelModelModel> ListAsync(this IGroups operations, bool? excludeMembers = default(bool?), string token = default(string), bool? excludeArchived = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(excludeMembers, token, excludeArchived, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the read cursor in a private channel.
            /// <see href="https://api.slack.com/methods/groups.mark" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='ts'>
            /// Timestamp of the most recently seen message.
            /// </param>
            /// <param name='channel'>
            /// Private channel to set reading cursor in.
            /// </param>
            public static MarkOKResponseModel Mark(this IGroups operations, string token = default(string), double? ts = default(double?), string channel = default(string))
            {
                return operations.MarkAsync(token, ts, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the read cursor in a private channel.
            /// <see href="https://api.slack.com/methods/groups.mark" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='ts'>
            /// Timestamp of the most recently seen message.
            /// </param>
            /// <param name='channel'>
            /// Private channel to set reading cursor in.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MarkOKResponseModel> MarkAsync(this IGroups operations, string token = default(string), double? ts = default(double?), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MarkWithHttpMessagesAsync(token, ts, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Opens a private channel.
            /// <see href="https://api.slack.com/methods/groups.open" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='channel'>
            /// Private channel to open.
            /// </param>
            public static OpenOKResponseModel Open(this IGroups operations, string token = default(string), string channel = default(string))
            {
                return operations.OpenAsync(token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Opens a private channel.
            /// <see href="https://api.slack.com/methods/groups.open" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='channel'>
            /// Private channel to open.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OpenOKResponseModel> OpenAsync(this IGroups operations, string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OpenWithHttpMessagesAsync(token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Renames a private channel.
            /// <see href="https://api.slack.com/methods/groups.rename" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='validate'>
            /// Whether to return errors on invalid channel name instead of modifying it to
            /// meet the specified criteria.
            /// </param>
            /// <param name='name'>
            /// New name for private channel.
            /// </param>
            /// <param name='channel'>
            /// Private channel to rename
            /// </param>
            public static RenameOKResponseModelModel Rename(this IGroups operations, string token = default(string), bool? validate = default(bool?), string name = default(string), string channel = default(string))
            {
                return operations.RenameAsync(token, validate, name, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Renames a private channel.
            /// <see href="https://api.slack.com/methods/groups.rename" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='validate'>
            /// Whether to return errors on invalid channel name instead of modifying it to
            /// meet the specified criteria.
            /// </param>
            /// <param name='name'>
            /// New name for private channel.
            /// </param>
            /// <param name='channel'>
            /// Private channel to rename
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RenameOKResponseModelModel> RenameAsync(this IGroups operations, string token = default(string), bool? validate = default(bool?), string name = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenameWithHttpMessagesAsync(token, validate, name, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a thread of messages posted to a private channel
            /// <see href="https://api.slack.com/methods/groups.replies" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='threadTs'>
            /// Unique identifier of a thread's parent message
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:history`
            /// </param>
            /// <param name='channel'>
            /// Private channel to fetch thread from
            /// </param>
            public static RepliesOKResponse Replies(this IGroups operations, double? threadTs = default(double?), string token = default(string), string channel = default(string))
            {
                return operations.RepliesAsync(threadTs, token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a thread of messages posted to a private channel
            /// <see href="https://api.slack.com/methods/groups.replies" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='threadTs'>
            /// Unique identifier of a thread's parent message
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:history`
            /// </param>
            /// <param name='channel'>
            /// Private channel to fetch thread from
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RepliesOKResponse> RepliesAsync(this IGroups operations, double? threadTs = default(double?), string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RepliesWithHttpMessagesAsync(threadTs, token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the purpose for a private channel.
            /// <see href="https://api.slack.com/methods/groups.setPurpose" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='purpose'>
            /// The new purpose
            /// </param>
            /// <param name='channel'>
            /// Private channel to set the purpose of
            /// </param>
            public static SetPurposeOKResponseModelModel SetPurpose(this IGroups operations, string token = default(string), string purpose = default(string), string channel = default(string))
            {
                return operations.SetPurposeAsync(token, purpose, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the purpose for a private channel.
            /// <see href="https://api.slack.com/methods/groups.setPurpose" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='purpose'>
            /// The new purpose
            /// </param>
            /// <param name='channel'>
            /// Private channel to set the purpose of
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SetPurposeOKResponseModelModel> SetPurposeAsync(this IGroups operations, string token = default(string), string purpose = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetPurposeWithHttpMessagesAsync(token, purpose, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the topic for a private channel.
            /// <see href="https://api.slack.com/methods/groups.setTopic" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='topic'>
            /// The new topic
            /// </param>
            /// <param name='channel'>
            /// Private channel to set the topic of
            /// </param>
            public static SetTopicOKResponseModelModel SetTopic(this IGroups operations, string token = default(string), string topic = default(string), string channel = default(string))
            {
                return operations.SetTopicAsync(token, topic, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the topic for a private channel.
            /// <see href="https://api.slack.com/methods/groups.setTopic" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='topic'>
            /// The new topic
            /// </param>
            /// <param name='channel'>
            /// Private channel to set the topic of
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SetTopicOKResponseModelModel> SetTopicAsync(this IGroups operations, string token = default(string), string topic = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetTopicWithHttpMessagesAsync(token, topic, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unarchives a private channel.
            /// <see href="https://api.slack.com/methods/groups.unarchive" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='channel'>
            /// Private channel to unarchive
            /// </param>
            public static UnarchiveOKResponse Unarchive(this IGroups operations, string token = default(string), string channel = default(string))
            {
                return operations.UnarchiveAsync(token, channel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unarchives a private channel.
            /// <see href="https://api.slack.com/methods/groups.unarchive" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `groups:write`
            /// </param>
            /// <param name='channel'>
            /// Private channel to unarchive
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UnarchiveOKResponse> UnarchiveAsync(this IGroups operations, string token = default(string), string channel = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnarchiveWithHttpMessagesAsync(token, channel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
