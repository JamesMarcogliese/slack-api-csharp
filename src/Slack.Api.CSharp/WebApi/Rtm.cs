// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Rtm operations.
    /// </summary>
    public partial class Rtm : IServiceOperations<SlackWebAPI>, IRtm
    {
        /// <summary>
        /// Initializes a new instance of the Rtm class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public Rtm(SlackWebAPI client)
        {
            if (client == null)
            {
                throw new System.ArgumentNullException("client");
            }
            Client = client;
        }

        /// <summary>
        /// Gets a reference to the SlackWebAPI
        /// </summary>
        public SlackWebAPI Client { get; private set; }

        /// <summary>
        /// Starts a Real Time Messaging session.
        /// <see href="https://api.slack.com/methods/rtm.connect" />
        /// </summary>
        /// <param name='presenceSub'>
        /// Only deliver presence events when requested by subscription. See [presence
        /// subscriptions](/docs/presence-and-status#subscriptions).
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `rtm:stream`
        /// </param>
        /// <param name='batchPresenceAware'>
        /// Batch presence deliveries via subscription. Enabling changes the shape of
        /// `presence_change` events. See [batch
        /// presence](/docs/presence-and-status#batching).
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ConnectErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ConnectOKResponse>> ConnectWithHttpMessagesAsync(bool? presenceSub = default(bool?), string token = default(string), bool? batchPresenceAware = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("presenceSub", presenceSub);
                tracingParameters.Add("token", token);
                tracingParameters.Add("batchPresenceAware", batchPresenceAware);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "Connect", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "rtm.connect").ToString();
            List<string> _queryParameters = new List<string>();
            if (presenceSub != null)
            {
                _queryParameters.Add(string.Format("presence_sub={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(presenceSub, Client.SerializationSettings).Trim('"'))));
            }
            if (token != null)
            {
                _queryParameters.Add(string.Format("token={0}", System.Uri.EscapeDataString(token)));
            }
            if (batchPresenceAware != null)
            {
                _queryParameters.Add(string.Format("batch_presence_aware={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(batchPresenceAware, Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new ConnectErrorModelException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    ConnectErrorModel _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ConnectErrorModel>(_responseContent, Client.DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ConnectOKResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ConnectOKResponse>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Starts a Real Time Messaging session.
        /// <see href="https://api.slack.com/methods/rtm.start" />
        /// </summary>
        /// <param name='noLatest'>
        /// Exclude latest timestamps for channels, groups, mpims, and ims.
        /// Automatically sets `no_unreads` to `1`
        /// </param>
        /// <param name='simpleLatest'>
        /// Return timestamp only for latest message object of each channel (improves
        /// performance).
        /// </param>
        /// <param name='includeLocale'>
        /// Set this to `true` to receive the locale for users and channels. Defaults
        /// to `false`
        /// </param>
        /// <param name='presenceSub'>
        /// Only deliver presence events when requested by subscription. See [presence
        /// subscriptions](/docs/presence-and-status#subscriptions).
        /// </param>
        /// <param name='noUnreads'>
        /// Skip unread counts for each channel (improves performance).
        /// </param>
        /// <param name='batchPresenceAware'>
        /// Batch presence deliveries via subscription. Enabling changes the shape of
        /// `presence_change` events. See [batch
        /// presence](/docs/presence-and-status#batching).
        /// </param>
        /// <param name='mpimAware'>
        /// Returns MPIMs to the client in the API response.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `rtm:stream`
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="StartErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<StartOKResponse>> StartWithHttpMessagesAsync(bool? noLatest = default(bool?), bool? simpleLatest = default(bool?), bool? includeLocale = default(bool?), bool? presenceSub = default(bool?), bool? noUnreads = default(bool?), bool? batchPresenceAware = default(bool?), bool? mpimAware = default(bool?), string token = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("noLatest", noLatest);
                tracingParameters.Add("simpleLatest", simpleLatest);
                tracingParameters.Add("includeLocale", includeLocale);
                tracingParameters.Add("presenceSub", presenceSub);
                tracingParameters.Add("noUnreads", noUnreads);
                tracingParameters.Add("batchPresenceAware", batchPresenceAware);
                tracingParameters.Add("mpimAware", mpimAware);
                tracingParameters.Add("token", token);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "Start", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "rtm.start").ToString();
            List<string> _queryParameters = new List<string>();
            if (noLatest != null)
            {
                _queryParameters.Add(string.Format("no_latest={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(noLatest, Client.SerializationSettings).Trim('"'))));
            }
            if (simpleLatest != null)
            {
                _queryParameters.Add(string.Format("simple_latest={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(simpleLatest, Client.SerializationSettings).Trim('"'))));
            }
            if (includeLocale != null)
            {
                _queryParameters.Add(string.Format("include_locale={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(includeLocale, Client.SerializationSettings).Trim('"'))));
            }
            if (presenceSub != null)
            {
                _queryParameters.Add(string.Format("presence_sub={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(presenceSub, Client.SerializationSettings).Trim('"'))));
            }
            if (noUnreads != null)
            {
                _queryParameters.Add(string.Format("no_unreads={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(noUnreads, Client.SerializationSettings).Trim('"'))));
            }
            if (batchPresenceAware != null)
            {
                _queryParameters.Add(string.Format("batch_presence_aware={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(batchPresenceAware, Client.SerializationSettings).Trim('"'))));
            }
            if (mpimAware != null)
            {
                _queryParameters.Add(string.Format("mpim_aware={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(mpimAware, Client.SerializationSettings).Trim('"'))));
            }
            if (token != null)
            {
                _queryParameters.Add(string.Format("token={0}", System.Uri.EscapeDataString(token)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new StartErrorModelException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    StartErrorModel _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<StartErrorModel>(_responseContent, Client.DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<StartOKResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<StartOKResponse>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
