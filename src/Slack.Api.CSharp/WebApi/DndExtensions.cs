// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Dnd.
    /// </summary>
    public static partial class DndExtensions
    {
            /// <summary>
            /// Ends the current user's Do Not Disturb session immediately.
            /// <see href="https://api.slack.com/methods/dnd.endDnd" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `dnd:write`
            /// </param>
            public static EndDndOKResponse EndDnd(this IDnd operations, string token = default(string))
            {
                return operations.EndDndAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Ends the current user's Do Not Disturb session immediately.
            /// <see href="https://api.slack.com/methods/dnd.endDnd" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `dnd:write`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EndDndOKResponse> EndDndAsync(this IDnd operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EndDndWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Ends the current user's snooze mode immediately.
            /// <see href="https://api.slack.com/methods/dnd.endSnooze" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `dnd:write`
            /// </param>
            public static EndSnoozeOKResponse EndSnooze(this IDnd operations, string token = default(string))
            {
                return operations.EndSnoozeAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Ends the current user's snooze mode immediately.
            /// <see href="https://api.slack.com/methods/dnd.endSnooze" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `dnd:write`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EndSnoozeOKResponse> EndSnoozeAsync(this IDnd operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EndSnoozeWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a user's current Do Not Disturb status.
            /// <see href="https://api.slack.com/methods/dnd.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `dnd:read`
            /// </param>
            /// <param name='user'>
            /// User to fetch status for (defaults to current user)
            /// </param>
            public static InfoOKResponse Info(this IDnd operations, string token = default(string), string user = default(string))
            {
                return operations.InfoAsync(token, user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a user's current Do Not Disturb status.
            /// <see href="https://api.slack.com/methods/dnd.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `dnd:read`
            /// </param>
            /// <param name='user'>
            /// User to fetch status for (defaults to current user)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfoOKResponse> InfoAsync(this IDnd operations, string token = default(string), string user = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InfoWithHttpMessagesAsync(token, user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Turns on Do Not Disturb mode for the current user, or changes its duration.
            /// <see href="https://api.slack.com/methods/dnd.setSnooze" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='numMinutes'>
            /// Number of minutes, from now, to snooze until.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `dnd:write`
            /// </param>
            public static SetSnoozeOKResponse SetSnooze(this IDnd operations, int? numMinutes = default(int?), string token = default(string))
            {
                return operations.SetSnoozeAsync(numMinutes, token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Turns on Do Not Disturb mode for the current user, or changes its duration.
            /// <see href="https://api.slack.com/methods/dnd.setSnooze" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='numMinutes'>
            /// Number of minutes, from now, to snooze until.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `dnd:write`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SetSnoozeOKResponse> SetSnoozeAsync(this IDnd operations, int? numMinutes = default(int?), string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSnoozeWithHttpMessagesAsync(numMinutes, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the Do Not Disturb status for users on a team.
            /// <see href="https://api.slack.com/methods/dnd.teamInfo" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `dnd:read`
            /// </param>
            /// <param name='users'>
            /// Comma-separated list of users to fetch Do Not Disturb status for
            /// </param>
            public static TeamInfoOKResponse TeamInfo(this IDnd operations, string token = default(string), string users = default(string))
            {
                return operations.TeamInfoAsync(token, users).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the Do Not Disturb status for users on a team.
            /// <see href="https://api.slack.com/methods/dnd.teamInfo" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `dnd:read`
            /// </param>
            /// <param name='users'>
            /// Comma-separated list of users to fetch Do Not Disturb status for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamInfoOKResponse> TeamInfoAsync(this IDnd operations, string token = default(string), string users = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TeamInfoWithHttpMessagesAsync(token, users, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
