// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Stars.
    /// </summary>
    public static partial class StarsExtensions
    {
            /// <summary>
            /// Adds a star to an item.
            /// <see href="https://api.slack.com/methods/stars.add" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `stars:write`
            /// </param>
            /// <param name='fileComment'>
            /// File comment to add star to.
            /// </param>
            /// <param name='timestamp'>
            /// Timestamp of the message to add star to.
            /// </param>
            /// <param name='channel'>
            /// Channel to add star to, or channel where the message to add star to was
            /// posted (used with `timestamp`).
            /// </param>
            /// <param name='file'>
            /// File to add star to.
            /// </param>
            public static AddOKResponseModelModelModel Add(this IStars operations, string token = default(string), string fileComment = default(string), string timestamp = default(string), string channel = default(string), string file = default(string))
            {
                return operations.AddAsync(token, fileComment, timestamp, channel, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a star to an item.
            /// <see href="https://api.slack.com/methods/stars.add" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `stars:write`
            /// </param>
            /// <param name='fileComment'>
            /// File comment to add star to.
            /// </param>
            /// <param name='timestamp'>
            /// Timestamp of the message to add star to.
            /// </param>
            /// <param name='channel'>
            /// Channel to add star to, or channel where the message to add star to was
            /// posted (used with `timestamp`).
            /// </param>
            /// <param name='file'>
            /// File to add star to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddOKResponseModelModelModel> AddAsync(this IStars operations, string token = default(string), string fileComment = default(string), string timestamp = default(string), string channel = default(string), string file = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(token, fileComment, timestamp, channel, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists stars for a user.
            /// <see href="https://api.slack.com/methods/stars.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `stars:read`
            /// </param>
            /// <param name='page'>
            /// </param>
            public static ListOKResponseModelModelModelModel List(this IStars operations, string count = default(string), string token = default(string), string page = default(string))
            {
                return operations.ListAsync(count, token, page).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists stars for a user.
            /// <see href="https://api.slack.com/methods/stars.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `stars:read`
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListOKResponseModelModelModelModel> ListAsync(this IStars operations, string count = default(string), string token = default(string), string page = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(count, token, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a star from an item.
            /// <see href="https://api.slack.com/methods/stars.remove" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `stars:write`
            /// </param>
            /// <param name='fileComment'>
            /// File comment to remove star from.
            /// </param>
            /// <param name='timestamp'>
            /// Timestamp of the message to remove star from.
            /// </param>
            /// <param name='channel'>
            /// Channel to remove star from, or channel where the message to remove star
            /// from was posted (used with `timestamp`).
            /// </param>
            /// <param name='file'>
            /// File to remove star from.
            /// </param>
            public static RemoveOKResponseModelModel Remove(this IStars operations, string token = default(string), string fileComment = default(string), string timestamp = default(string), string channel = default(string), string file = default(string))
            {
                return operations.RemoveAsync(token, fileComment, timestamp, channel, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a star from an item.
            /// <see href="https://api.slack.com/methods/stars.remove" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `stars:write`
            /// </param>
            /// <param name='fileComment'>
            /// File comment to remove star from.
            /// </param>
            /// <param name='timestamp'>
            /// Timestamp of the message to remove star from.
            /// </param>
            /// <param name='channel'>
            /// Channel to remove star from, or channel where the message to remove star
            /// from was posted (used with `timestamp`).
            /// </param>
            /// <param name='file'>
            /// File to remove star from.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RemoveOKResponseModelModel> RemoveAsync(this IStars operations, string token = default(string), string fileComment = default(string), string timestamp = default(string), string channel = default(string), string file = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveWithHttpMessagesAsync(token, fileComment, timestamp, channel, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
