// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Apps.
    /// </summary>
    public static partial class AppsExtensions
    {
            /// <summary>
            /// Returns list of permissions this app has on a team.
            /// <see href="https://api.slack.com/methods/apps.permissions.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            public static InfoOKResponse Info(this IApps operations, string token = default(string))
            {
                return operations.InfoAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of permissions this app has on a team.
            /// <see href="https://api.slack.com/methods/apps.permissions.info" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InfoOKResponse> InfoAsync(this IApps operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InfoWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Allows an app to request additional scopes
            /// <see href="https://api.slack.com/methods/apps.permissions.request" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scopes'>
            /// A comma separated list of scopes to request for
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            /// <param name='triggerId'>
            /// Token used to trigger the permissions API
            /// </param>
            public static RequestOKResponse Request(this IApps operations, string scopes = default(string), string token = default(string), string triggerId = default(string))
            {
                return operations.RequestAsync(scopes, token, triggerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows an app to request additional scopes
            /// <see href="https://api.slack.com/methods/apps.permissions.request" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scopes'>
            /// A comma separated list of scopes to request for
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            /// <param name='triggerId'>
            /// Token used to trigger the permissions API
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RequestOKResponse> RequestAsync(this IApps operations, string scopes = default(string), string token = default(string), string triggerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestWithHttpMessagesAsync(scopes, token, triggerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of resource grants this app has on a team.
            /// <see href="https://api.slack.com/methods/apps.permissions.resources.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return.
            /// </param>
            public static ListOKResponse List(this IApps operations, string cursor = default(string), string token = default(string), int? limit = default(int?))
            {
                return operations.ListAsync(cursor, token, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of resource grants this app has on a team.
            /// <see href="https://api.slack.com/methods/apps.permissions.resources.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursor'>
            /// Paginate through collections of data by setting the `cursor` parameter to a
            /// `next_cursor` attribute returned by a previous request's
            /// `response_metadata`. Default value fetches the first "page" of the
            /// collection. See [pagination](/docs/pagination) for more detail.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            /// <param name='limit'>
            /// The maximum number of items to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListOKResponse> ListAsync(this IApps operations, string cursor = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(cursor, token, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of scopes this app has on a team.
            /// <see href="https://api.slack.com/methods/apps.permissions.scopes.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            public static ListOKResponseModel List1(this IApps operations, string token = default(string))
            {
                return operations.List1Async(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of scopes this app has on a team.
            /// <see href="https://api.slack.com/methods/apps.permissions.scopes.list" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Authentication token. Requires scope: `none`
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListOKResponseModel> List1Async(this IApps operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.List1WithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
