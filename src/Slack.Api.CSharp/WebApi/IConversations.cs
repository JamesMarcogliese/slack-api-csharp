// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Slack.Api.CSharp.WebApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Conversations operations.
    /// </summary>
    public partial interface IConversations
    {
        /// <summary>
        /// Archives a conversation.
        /// <see href="https://api.slack.com/methods/conversations.archive" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='channel'>
        /// ID of conversation to archive
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ArchiveErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ArchiveOKResponseModel>> ArchiveWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Closes a direct message or multi-person direct message.
        /// <see href="https://api.slack.com/methods/conversations.close" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='channel'>
        /// Conversation to close.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CloseErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<CloseOKResponse>> CloseWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Initiates a public or private channel-based conversation
        /// <see href="https://api.slack.com/methods/conversations.create" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='name'>
        /// Name of the public or private channel to create
        /// </param>
        /// <param name='isPrivate'>
        /// Create a private channel instead of a public one
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="CreateErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<CreateOKResponseModel>> CreateWithHttpMessagesAsync(string token = default(string), string name = default(string), bool? isPrivate = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Fetches a conversation's history of messages and events.
        /// <see href="https://api.slack.com/methods/conversations.history" />
        /// </summary>
        /// <param name='inclusive'>
        /// Include messages with latest or oldest timestamp in results only
        /// when either timestamp is specified.
        /// </param>
        /// <param name='cursor'>
        /// Paginate through collections of data by setting the `cursor`
        /// parameter to a `next_cursor` attribute returned by a previous
        /// request's `response_metadata`. Default value fetches the first
        /// "page" of the collection. See [pagination](/docs/pagination) for
        /// more detail.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:history`
        /// </param>
        /// <param name='limit'>
        /// The maximum number of items to return. Fewer than the requested
        /// number of items may be returned, even if the end of the users list
        /// hasn't been reached.
        /// </param>
        /// <param name='oldest'>
        /// Start of time range of messages to include in results.
        /// </param>
        /// <param name='channel'>
        /// Conversation ID to fetch history for.
        /// </param>
        /// <param name='latest'>
        /// End of time range of messages to include in results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HistoryErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<HistoryOKResponseModel>> HistoryWithHttpMessagesAsync(bool? inclusive = default(bool?), string cursor = default(string), string token = default(string), int? limit = default(int?), double? oldest = default(double?), string channel = default(string), double? latest = default(double?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve information about a conversation.
        /// <see href="https://api.slack.com/methods/conversations.info" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:read`
        /// </param>
        /// <param name='channel'>
        /// Conversation ID to learn more about
        /// </param>
        /// <param name='includeLocale'>
        /// Set this to `true` to receive the locale for this conversation.
        /// Defaults to `false`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="InfoErrorModel3Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<InfoOKResponseModelModelModel>> InfoWithHttpMessagesAsync(string token = default(string), string channel = default(string), bool? includeLocale = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Invites users to a channel.
        /// <see href="https://api.slack.com/methods/conversations.invite" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='users'>
        /// A comma separated list of user IDs. Up to 30 users may be listed.
        /// </param>
        /// <param name='channel'>
        /// The ID of the public or private channel to invite user(s) to.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="InviteErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<InviteOKResponseModel>> InviteWithHttpMessagesAsync(string token = default(string), string users = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Joins an existing conversation.
        /// <see href="https://api.slack.com/methods/conversations.join" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `channels:write`
        /// </param>
        /// <param name='channel'>
        /// ID of conversation to join
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="JoinErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<JoinOKResponseModel>> JoinWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Removes a user from a conversation.
        /// <see href="https://api.slack.com/methods/conversations.kick" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='user'>
        /// User ID to be removed.
        /// </param>
        /// <param name='channel'>
        /// ID of conversation to remove user from.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="KickErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<KickOKResponseModel>> KickWithHttpMessagesAsync(string token = default(string), string user = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leaves a conversation.
        /// <see href="https://api.slack.com/methods/conversations.leave" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='channel'>
        /// Conversation to leave
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="LeaveErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<LeaveOKResponseModel>> LeaveWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists all channels in a Slack team.
        /// <see href="https://api.slack.com/methods/conversations.list" />
        /// </summary>
        /// <param name='cursor'>
        /// Paginate through collections of data by setting the `cursor`
        /// parameter to a `next_cursor` attribute returned by a previous
        /// request's `response_metadata`. Default value fetches the first
        /// "page" of the collection. See [pagination](/docs/pagination) for
        /// more detail.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:read`
        /// </param>
        /// <param name='limit'>
        /// The maximum number of items to return. Fewer than the requested
        /// number of items may be returned, even if the end of the list hasn't
        /// been reached. Must be an integer no larger than 1000.
        /// </param>
        /// <param name='excludeArchived'>
        /// Set to `true` to exclude archived channels from the list
        /// </param>
        /// <param name='types'>
        /// Mix and match channel types by providing a comma-separated list of
        /// any combination of `public_channel`, `private_channel`, `mpim`,
        /// `im`
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ListErrorModel3Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ListOKResponseModelModelModel>> ListWithHttpMessagesAsync(string cursor = default(string), string token = default(string), int? limit = default(int?), bool? excludeArchived = default(bool?), string types = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve members of a conversation.
        /// <see href="https://api.slack.com/methods/conversations.members" />
        /// </summary>
        /// <param name='cursor'>
        /// Paginate through collections of data by setting the `cursor`
        /// parameter to a `next_cursor` attribute returned by a previous
        /// request's `response_metadata`. Default value fetches the first
        /// "page" of the collection. See [pagination](/docs/pagination) for
        /// more detail.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:read`
        /// </param>
        /// <param name='limit'>
        /// The maximum number of items to return. Fewer than the requested
        /// number of items may be returned, even if the end of the users list
        /// hasn't been reached.
        /// </param>
        /// <param name='channel'>
        /// ID of the conversation to retrieve members for
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="MembersErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<MembersOKResponse>> MembersWithHttpMessagesAsync(string cursor = default(string), string token = default(string), int? limit = default(int?), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Opens or resumes a direct message or multi-person direct message.
        /// <see href="https://api.slack.com/methods/conversations.open" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='returnIm'>
        /// Boolean, indicates you want the full IM channel definition in the
        /// response.
        /// </param>
        /// <param name='users'>
        /// Comma separated lists of users. If only one user is included, this
        /// creates a 1:1 DM.  The ordering of the users is preserved whenever
        /// a multi-person direct message is returned. Supply a `channel` when
        /// not supplying `users`.
        /// </param>
        /// <param name='channel'>
        /// Resume a conversation by supplying an `im` or `mpim`'s ID. Or
        /// provide the `users` field instead.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="OpenErrorModelException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<OpenOKResponse>> OpenWithHttpMessagesAsync(string token = default(string), bool? returnIm = default(bool?), string users = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Renames a conversation.
        /// <see href="https://api.slack.com/methods/conversations.rename" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='name'>
        /// New name for conversation.
        /// </param>
        /// <param name='channel'>
        /// ID of conversation to rename
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RenameErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RenameOKResponseModel>> RenameWithHttpMessagesAsync(string token = default(string), string name = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a thread of messages posted to a conversation
        /// <see href="https://api.slack.com/methods/conversations.replies" />
        /// </summary>
        /// <param name='inclusive'>
        /// Include messages with latest or oldest timestamp in results only
        /// when either timestamp is specified.
        /// </param>
        /// <param name='ts'>
        /// Unique identifier of a thread's parent message.
        /// </param>
        /// <param name='cursor'>
        /// Paginate through collections of data by setting the `cursor`
        /// parameter to a `next_cursor` attribute returned by a previous
        /// request's `response_metadata`. Default value fetches the first
        /// "page" of the collection. See [pagination](/docs/pagination) for
        /// more detail.
        /// </param>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:history`
        /// </param>
        /// <param name='limit'>
        /// The maximum number of items to return. Fewer than the requested
        /// number of items may be returned, even if the end of the users list
        /// hasn't been reached.
        /// </param>
        /// <param name='oldest'>
        /// Start of time range of messages to include in results.
        /// </param>
        /// <param name='channel'>
        /// Conversation ID to fetch thread from.
        /// </param>
        /// <param name='latest'>
        /// End of time range of messages to include in results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RepliesErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RepliesOKResponseModel>> RepliesWithHttpMessagesAsync(bool? inclusive = default(bool?), double? ts = default(double?), string cursor = default(string), string token = default(string), int? limit = default(int?), double? oldest = default(double?), string channel = default(string), double? latest = default(double?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the purpose for a conversation.
        /// <see href="https://api.slack.com/methods/conversations.setPurpose" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='purpose'>
        /// A new, specialer purpose
        /// </param>
        /// <param name='channel'>
        /// Conversation to set the purpose of
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SetPurposeErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SetPurposeOKResponseModel>> SetPurposeWithHttpMessagesAsync(string token = default(string), string purpose = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets the topic for a conversation.
        /// <see href="https://api.slack.com/methods/conversations.setTopic" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='topic'>
        /// The new topic string. Does not support formatting or linkification.
        /// </param>
        /// <param name='channel'>
        /// Conversation to set the topic of
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="SetTopicErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SetTopicOKResponseModel>> SetTopicWithHttpMessagesAsync(string token = default(string), string topic = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reverses conversation archival.
        /// <see href="https://api.slack.com/methods/conversations.unarchive" />
        /// </summary>
        /// <param name='token'>
        /// Authentication token. Requires scope: `conversations:write`
        /// </param>
        /// <param name='channel'>
        /// ID of conversation to unarchive
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="UnarchiveErrorModel1Exception">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UnarchiveOKResponseModel>> UnarchiveWithHttpMessagesAsync(string token = default(string), string channel = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
